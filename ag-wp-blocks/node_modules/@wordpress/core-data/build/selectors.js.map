{"version":3,"sources":["@wordpress/core-data/src/selectors.ts"],"names":["EMPTY_OBJECT","isRequestingEmbedPreview","select","state","url","STORE_NAME","isResolving","getAuthors","query","since","alternative","path","getUserQueryResults","getCurrentUser","currentUser","queryID","queryResults","users","queries","id","byId","getEntitiesByKind","kind","getEntitiesConfig","entities","config","getEntity","name","getEntityConfig","getEntityRecord","key","queriedState","records","undefined","context","itemIsComplete","items","item","_fields","filteredItem","fields","f","length","field","split","value","recordId","__experimentalGetEntityRecordNoResolver","getRawEntityRecord","record","Object","keys","reduce","accumulator","_key","hasEntityRecords","Array","isArray","getEntityRecords","__experimentalGetDirtyEntityRecords","dirtyRecords","forEach","primaryKeys","edits","filter","primaryKey","hasEditsForEntityRecord","entityConfig","entityRecord","getEditedEntityRecord","push","DEFAULT_ENTITY_KEY","title","getTitle","__experimentalGetEntitiesBeingSaved","recordsBeingSaved","saving","isSavingEntityRecord","getEntityRecordEdits","getEntityRecordNonTransientEdits","transientEdits","acc","isAutosavingEntityRecord","pending","isAutosave","Boolean","isDeletingEntityRecord","getLastEntitySaveError","getLastEntityDeleteError","getCurrentUndoOffset","undo","offset","getUndoEdit","getRedoEdit","hasUndo","hasRedo","getCurrentTheme","currentTheme","__experimentalGetCurrentGlobalStylesId","currentGlobalStylesId","getThemeSupports","theme_supports","getEmbedPreview","embedPreviews","isPreviewEmbedFallback","preview","oEmbedLinkCheck","html","canUser","action","resource","join","canUserEditEntityRecord","__unstable_rest_base","getAutosaves","postType","postId","autosaves","getAutosave","authorId","author","hasFetchedAutosaves","hasFinishedResolution","getReferenceByDistinctEdits","flattenedUndo","__experimentalGetTemplateForLink","link","template","__experimentalGetCurrentThemeBaseGlobalStyles","themeBaseGlobalStyles","stylesheet","__experimentalGetCurrentThemeGlobalStylesVariations","themeGlobalStyleVariations","getBlockPatterns","blockPatterns","getBlockPatternCategories","blockPatternCategories"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport createSelector from 'rememo';\nimport { set, map, find, get, filter, compact } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { createRegistrySelector } from '@wordpress/data';\nimport { addQueryArgs } from '@wordpress/url';\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Internal dependencies\n */\nimport { STORE_NAME } from './name';\nimport { getQueriedItems } from './queried-data';\nimport { DEFAULT_ENTITY_KEY } from './entities';\nimport { getNormalizedCommaSeparable, isRawAttribute } from './utils';\n\n/**\n * Shared reference to an empty object for cases where it is important to avoid\n * returning a new object reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n */\nconst EMPTY_OBJECT = {};\n\n/**\n * Returns true if a request is in progress for embed preview data, or false\n * otherwise.\n *\n * @param {Object} state Data state.\n * @param {string} url   URL the preview would be for.\n *\n * @return {boolean} Whether a request is in progress for an embed preview.\n */\nexport const isRequestingEmbedPreview = createRegistrySelector(\n\t( select ) => ( state, url ) => {\n\t\treturn select( STORE_NAME ).isResolving( 'getEmbedPreview', [ url ] );\n\t}\n);\n\n/**\n * Returns all available authors.\n *\n * @deprecated since 11.3. Callers should use `select( 'core' ).getUsers({ who: 'authors' })` instead.\n *\n * @param {Object}           state Data state.\n * @param {Object|undefined} query Optional object of query parameters to\n *                                 include with request.\n * @return {Array} Authors list.\n */\nexport function getAuthors( state, query ) {\n\tdeprecated( \"select( 'core' ).getAuthors()\", {\n\t\tsince: '5.9',\n\t\talternative: \"select( 'core' ).getUsers({ who: 'authors' })\",\n\t} );\n\n\tconst path = addQueryArgs(\n\t\t'/wp/v2/users/?who=authors&per_page=100',\n\t\tquery\n\t);\n\treturn getUserQueryResults( state, path );\n}\n\n/**\n * Returns the current user.\n *\n * @param {Object} state Data state.\n *\n * @return {Object} Current user object.\n */\nexport function getCurrentUser( state ) {\n\treturn state.currentUser;\n}\n\n/**\n * Returns all the users returned by a query ID.\n *\n * @param {Object} state   Data state.\n * @param {string} queryID Query ID.\n *\n * @return {Array} Users list.\n */\nexport const getUserQueryResults = createSelector(\n\t( state, queryID ) => {\n\t\tconst queryResults = state.users.queries[ queryID ];\n\n\t\treturn map( queryResults, ( id ) => state.users.byId[ id ] );\n\t},\n\t( state, queryID ) => [ state.users.queries[ queryID ], state.users.byId ]\n);\n\n/**\n * Returns the loaded entities for the given kind.\n *\n * @deprecated since WordPress 6.0. Use getEntitiesConfig instead\n * @param {Object} state Data state.\n * @param {string} kind  Entity kind.\n *\n * @return {Array<Object>} Array of entities with config matching kind.\n */\nexport function getEntitiesByKind( state, kind ) {\n\tdeprecated( \"wp.data.select( 'core' ).getEntitiesByKind()\", {\n\t\tsince: '6.0',\n\t\talternative: \"wp.data.select( 'core' ).getEntitiesConfig()\",\n\t} );\n\treturn getEntitiesConfig( state, kind );\n}\n\n/**\n * Returns the loaded entities for the given kind.\n *\n * @param {Object} state Data state.\n * @param {string} kind  Entity kind.\n *\n * @return {Array<Object>} Array of entities with config matching kind.\n */\nexport function getEntitiesConfig( state, kind ) {\n\treturn filter( state.entities.config, { kind } );\n}\n\n/**\n * Returns the entity config given its kind and name.\n *\n * @deprecated since WordPress 6.0. Use getEntityConfig instead\n * @param {Object} state Data state.\n * @param {string} kind  Entity kind.\n * @param {string} name  Entity name.\n *\n * @return {Object} Entity config\n */\nexport function getEntity( state, kind, name ) {\n\tdeprecated( \"wp.data.select( 'core' ).getEntity()\", {\n\t\tsince: '6.0',\n\t\talternative: \"wp.data.select( 'core' ).getEntityConfig()\",\n\t} );\n\treturn getEntityConfig( state, kind, name );\n}\n\n/**\n * Returns the entity config given its kind and name.\n *\n * @param {Object} state Data state.\n * @param {string} kind  Entity kind.\n * @param {string} name  Entity name.\n *\n * @return {Object} Entity config\n */\nexport function getEntityConfig( state, kind, name ) {\n\treturn find( state.entities.config, { kind, name } );\n}\n\n/**\n * Returns the Entity's record object by key. Returns `null` if the value is not\n * yet received, undefined if the value entity is known to not exist, or the\n * entity object if it exists and is received.\n *\n * @param {Object}  state State tree\n * @param {string}  kind  Entity kind.\n * @param {string}  name  Entity name.\n * @param {number}  key   Record's key\n * @param {?Object} query Optional query.\n *\n * @return {Object|undefined} Record.\n */\nexport const getEntityRecord = createSelector(\n\t( state, kind, name, key, query ) => {\n\t\tconst queriedState = get( state.entities.records, [\n\t\t\tkind,\n\t\t\tname,\n\t\t\t'queriedData',\n\t\t] );\n\t\tif ( ! queriedState ) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst context = query?.context ?? 'default';\n\n\t\tif ( query === undefined ) {\n\t\t\t// If expecting a complete item, validate that completeness.\n\t\t\tif ( ! queriedState.itemIsComplete[ context ]?.[ key ] ) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\treturn queriedState.items[ context ][ key ];\n\t\t}\n\n\t\tconst item = queriedState.items[ context ]?.[ key ];\n\t\tif ( item && query._fields ) {\n\t\t\tconst filteredItem = {};\n\t\t\tconst fields = getNormalizedCommaSeparable( query._fields ) ?? [];\n\t\t\tfor ( let f = 0; f < fields.length; f++ ) {\n\t\t\t\tconst field = fields[ f ].split( '.' );\n\t\t\t\tconst value = get( item, field );\n\t\t\t\tset( filteredItem, field, value );\n\t\t\t}\n\t\t\treturn filteredItem;\n\t\t}\n\n\t\treturn item;\n\t},\n\t( state, kind, name, recordId, query ) => {\n\t\tconst context = query?.context ?? 'default';\n\t\treturn [\n\t\t\tget( state.entities.records, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'items',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t\tget( state.entities.records, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'itemIsComplete',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t];\n\t}\n);\n\n/**\n * Returns the Entity's record object by key. Doesn't trigger a resolver nor requests the entity records from the API if the entity record isn't available in the local state.\n *\n * @param {Object} state State tree\n * @param {string} kind  Entity kind.\n * @param {string} name  Entity name.\n * @param {number} key   Record's key\n *\n * @return {Object|null} Record.\n */\nexport function __experimentalGetEntityRecordNoResolver(\n\tstate,\n\tkind,\n\tname,\n\tkey\n) {\n\treturn getEntityRecord( state, kind, name, key );\n}\n\n/**\n * Returns the entity's record object by key,\n * with its attributes mapped to their raw values.\n *\n * @param {Object} state State tree.\n * @param {string} kind  Entity kind.\n * @param {string} name  Entity name.\n * @param {number} key   Record's key.\n *\n * @return {Object?} Object with the entity's raw attributes.\n */\nexport const getRawEntityRecord = createSelector(\n\t( state, kind, name, key ) => {\n\t\tconst record = getEntityRecord( state, kind, name, key );\n\t\treturn (\n\t\t\trecord &&\n\t\t\tObject.keys( record ).reduce( ( accumulator, _key ) => {\n\t\t\t\tif (\n\t\t\t\t\tisRawAttribute( getEntityConfig( state, kind, name ), _key )\n\t\t\t\t) {\n\t\t\t\t\t// Because edits are the \"raw\" attribute values,\n\t\t\t\t\t// we return those from record selectors to make rendering,\n\t\t\t\t\t// comparisons, and joins with edits easier.\n\t\t\t\t\taccumulator[ _key ] = get(\n\t\t\t\t\t\trecord[ _key ],\n\t\t\t\t\t\t'raw',\n\t\t\t\t\t\trecord[ _key ]\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\taccumulator[ _key ] = record[ _key ];\n\t\t\t\t}\n\t\t\t\treturn accumulator;\n\t\t\t}, {} )\n\t\t);\n\t},\n\t( state, kind, name, recordId, query ) => {\n\t\tconst context = query?.context ?? 'default';\n\t\treturn [\n\t\t\tstate.entities.config,\n\t\t\tget( state.entities.records, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'items',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t\tget( state.entities.records, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'itemIsComplete',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t];\n\t}\n);\n\n/**\n * Returns true if records have been received for the given set of parameters,\n * or false otherwise.\n *\n * @param {Object}  state State tree\n * @param {string}  kind  Entity kind.\n * @param {string}  name  Entity name.\n * @param {?Object} query Optional terms query.\n *\n * @return {boolean} Whether entity records have been received.\n */\nexport function hasEntityRecords( state, kind, name, query ) {\n\treturn Array.isArray( getEntityRecords( state, kind, name, query ) );\n}\n\n/**\n * Returns the Entity's records.\n *\n * @param {Object}  state State tree\n * @param {string}  kind  Entity kind.\n * @param {string}  name  Entity name.\n * @param {?Object} query Optional terms query.\n *\n * @return {?Array} Records.\n */\nexport function getEntityRecords( state, kind, name, query ) {\n\t// Queried data state is prepopulated for all known entities. If this is not\n\t// assigned for the given parameters, then it is known to not exist.\n\tconst queriedState = get( state.entities.records, [\n\t\tkind,\n\t\tname,\n\t\t'queriedData',\n\t] );\n\tif ( ! queriedState ) {\n\t\treturn null;\n\t}\n\treturn getQueriedItems( queriedState, query );\n}\n\n/**\n * Returns the list of dirty entity records.\n *\n * @param {Object} state State tree.\n *\n * @return {[{ title: string, key: string, name: string, kind: string }]} The list of updated records\n */\nexport const __experimentalGetDirtyEntityRecords = createSelector(\n\t( state ) => {\n\t\tconst {\n\t\t\tentities: { records },\n\t\t} = state;\n\t\tconst dirtyRecords = [];\n\t\tObject.keys( records ).forEach( ( kind ) => {\n\t\t\tObject.keys( records[ kind ] ).forEach( ( name ) => {\n\t\t\t\tconst primaryKeys = Object.keys(\n\t\t\t\t\trecords[ kind ][ name ].edits\n\t\t\t\t).filter(\n\t\t\t\t\t( primaryKey ) =>\n\t\t\t\t\t\t// The entity record must exist (not be deleted),\n\t\t\t\t\t\t// and it must have edits.\n\t\t\t\t\t\tgetEntityRecord( state, kind, name, primaryKey ) &&\n\t\t\t\t\t\thasEditsForEntityRecord( state, kind, name, primaryKey )\n\t\t\t\t);\n\n\t\t\t\tif ( primaryKeys.length ) {\n\t\t\t\t\tconst entityConfig = getEntityConfig( state, kind, name );\n\t\t\t\t\tprimaryKeys.forEach( ( primaryKey ) => {\n\t\t\t\t\t\tconst entityRecord = getEditedEntityRecord(\n\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tprimaryKey\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdirtyRecords.push( {\n\t\t\t\t\t\t\t// We avoid using primaryKey because it's transformed into a string\n\t\t\t\t\t\t\t// when it's used as an object key.\n\t\t\t\t\t\t\tkey:\n\t\t\t\t\t\t\t\tentityRecord[\n\t\t\t\t\t\t\t\t\tentityConfig.key || DEFAULT_ENTITY_KEY\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\ttitle:\n\t\t\t\t\t\t\t\tentityConfig?.getTitle?.( entityRecord ) || '',\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t} );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\n\t\treturn dirtyRecords;\n\t},\n\t( state ) => [ state.entities.records ]\n);\n\n/**\n * Returns the list of entities currently being saved.\n *\n * @param {Object} state State tree.\n *\n * @return {[{ title: string, key: string, name: string, kind: string }]} The list of records being saved.\n */\nexport const __experimentalGetEntitiesBeingSaved = createSelector(\n\t( state ) => {\n\t\tconst {\n\t\t\tentities: { records },\n\t\t} = state;\n\t\tconst recordsBeingSaved = [];\n\t\tObject.keys( records ).forEach( ( kind ) => {\n\t\t\tObject.keys( records[ kind ] ).forEach( ( name ) => {\n\t\t\t\tconst primaryKeys = Object.keys(\n\t\t\t\t\trecords[ kind ][ name ].saving\n\t\t\t\t).filter( ( primaryKey ) =>\n\t\t\t\t\tisSavingEntityRecord( state, kind, name, primaryKey )\n\t\t\t\t);\n\n\t\t\t\tif ( primaryKeys.length ) {\n\t\t\t\t\tconst entityConfig = getEntityConfig( state, kind, name );\n\t\t\t\t\tprimaryKeys.forEach( ( primaryKey ) => {\n\t\t\t\t\t\tconst entityRecord = getEditedEntityRecord(\n\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tprimaryKey\n\t\t\t\t\t\t);\n\t\t\t\t\t\trecordsBeingSaved.push( {\n\t\t\t\t\t\t\t// We avoid using primaryKey because it's transformed into a string\n\t\t\t\t\t\t\t// when it's used as an object key.\n\t\t\t\t\t\t\tkey:\n\t\t\t\t\t\t\t\tentityRecord[\n\t\t\t\t\t\t\t\t\tentityConfig.key || DEFAULT_ENTITY_KEY\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\ttitle:\n\t\t\t\t\t\t\t\tentityConfig?.getTitle?.( entityRecord ) || '',\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t} );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t\treturn recordsBeingSaved;\n\t},\n\t( state ) => [ state.entities.records ]\n);\n\n/**\n * Returns the specified entity record's edits.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {Object?} The entity record's edits.\n */\nexport function getEntityRecordEdits( state, kind, name, recordId ) {\n\treturn get( state.entities.records, [ kind, name, 'edits', recordId ] );\n}\n\n/**\n * Returns the specified entity record's non transient edits.\n *\n * Transient edits don't create an undo level, and\n * are not considered for change detection.\n * They are defined in the entity's config.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {Object?} The entity record's non transient edits.\n */\nexport const getEntityRecordNonTransientEdits = createSelector(\n\t( state, kind, name, recordId ) => {\n\t\tconst { transientEdits } = getEntityConfig( state, kind, name ) || {};\n\t\tconst edits = getEntityRecordEdits( state, kind, name, recordId ) || {};\n\t\tif ( ! transientEdits ) {\n\t\t\treturn edits;\n\t\t}\n\t\treturn Object.keys( edits ).reduce( ( acc, key ) => {\n\t\t\tif ( ! transientEdits[ key ] ) {\n\t\t\t\tacc[ key ] = edits[ key ];\n\t\t\t}\n\t\t\treturn acc;\n\t\t}, {} );\n\t},\n\t( state, kind, name, recordId ) => [\n\t\tstate.entities.config,\n\t\tget( state.entities.records, [ kind, name, 'edits', recordId ] ),\n\t]\n);\n\n/**\n * Returns true if the specified entity record has edits,\n * and false otherwise.\n *\n * @param {Object}        state    State tree.\n * @param {string}        kind     Entity kind.\n * @param {string}        name     Entity name.\n * @param {number|string} recordId Record ID.\n *\n * @return {boolean} Whether the entity record has edits or not.\n */\nexport function hasEditsForEntityRecord( state, kind, name, recordId ) {\n\treturn (\n\t\tisSavingEntityRecord( state, kind, name, recordId ) ||\n\t\tObject.keys(\n\t\t\tgetEntityRecordNonTransientEdits( state, kind, name, recordId )\n\t\t).length > 0\n\t);\n}\n\n/**\n * Returns the specified entity record, merged with its edits.\n *\n * @param {Object}        state    State tree.\n * @param {string}        kind     Entity kind.\n * @param {string}        name     Entity name.\n * @param {number|string} recordId Record ID.\n *\n * @return {Object?} The entity record, merged with its edits.\n */\nexport const getEditedEntityRecord = createSelector(\n\t( state, kind, name, recordId ) => ( {\n\t\t...getRawEntityRecord( state, kind, name, recordId ),\n\t\t...getEntityRecordEdits( state, kind, name, recordId ),\n\t} ),\n\t( state, kind, name, recordId, query ) => {\n\t\tconst context = query?.context ?? 'default';\n\t\treturn [\n\t\t\tstate.entities.config,\n\t\t\tget( state.entities.records, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'items',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t\tget( state.entities.records, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'itemIsComplete',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t\tget( state.entities.records, [ kind, name, 'edits', recordId ] ),\n\t\t];\n\t}\n);\n\n/**\n * Returns true if the specified entity record is autosaving, and false otherwise.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {boolean} Whether the entity record is autosaving or not.\n */\nexport function isAutosavingEntityRecord( state, kind, name, recordId ) {\n\tconst { pending, isAutosave } = get(\n\t\tstate.entities.records,\n\t\t[ kind, name, 'saving', recordId ],\n\t\t{}\n\t);\n\treturn Boolean( pending && isAutosave );\n}\n\n/**\n * Returns true if the specified entity record is saving, and false otherwise.\n *\n * @param {Object}        state    State tree.\n * @param {string}        kind     Entity kind.\n * @param {string}        name     Entity name.\n * @param {number|string} recordId Record ID.\n *\n * @return {boolean} Whether the entity record is saving or not.\n */\nexport function isSavingEntityRecord( state, kind, name, recordId ) {\n\treturn get(\n\t\tstate.entities.records,\n\t\t[ kind, name, 'saving', recordId, 'pending' ],\n\t\tfalse\n\t);\n}\n\n/**\n * Returns true if the specified entity record is deleting, and false otherwise.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {boolean} Whether the entity record is deleting or not.\n */\nexport function isDeletingEntityRecord( state, kind, name, recordId ) {\n\treturn get(\n\t\tstate.entities.records,\n\t\t[ kind, name, 'deleting', recordId, 'pending' ],\n\t\tfalse\n\t);\n}\n\n/**\n * Returns the specified entity record's last save error.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {Object?} The entity record's save error.\n */\nexport function getLastEntitySaveError( state, kind, name, recordId ) {\n\treturn get( state.entities.records, [\n\t\tkind,\n\t\tname,\n\t\t'saving',\n\t\trecordId,\n\t\t'error',\n\t] );\n}\n\n/**\n * Returns the specified entity record's last delete error.\n *\n * @param {Object} state    State tree.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {number} recordId Record ID.\n *\n * @return {Object?} The entity record's save error.\n */\nexport function getLastEntityDeleteError( state, kind, name, recordId ) {\n\treturn get( state.entities.records, [\n\t\tkind,\n\t\tname,\n\t\t'deleting',\n\t\trecordId,\n\t\t'error',\n\t] );\n}\n\n/**\n * Returns the current undo offset for the\n * entity records edits history. The offset\n * represents how many items from the end\n * of the history stack we are at. 0 is the\n * last edit, -1 is the second last, and so on.\n *\n * @param {Object} state State tree.\n *\n * @return {number} The current undo offset.\n */\nfunction getCurrentUndoOffset( state ) {\n\treturn state.undo.offset;\n}\n\n/**\n * Returns the previous edit from the current undo offset\n * for the entity records edits history, if any.\n *\n * @param {Object} state State tree.\n *\n * @return {Object?} The edit.\n */\nexport function getUndoEdit( state ) {\n\treturn state.undo[ state.undo.length - 2 + getCurrentUndoOffset( state ) ];\n}\n\n/**\n * Returns the next edit from the current undo offset\n * for the entity records edits history, if any.\n *\n * @param {Object} state State tree.\n *\n * @return {Object?} The edit.\n */\nexport function getRedoEdit( state ) {\n\treturn state.undo[ state.undo.length + getCurrentUndoOffset( state ) ];\n}\n\n/**\n * Returns true if there is a previous edit from the current undo offset\n * for the entity records edits history, and false otherwise.\n *\n * @param {Object} state State tree.\n *\n * @return {boolean} Whether there is a previous edit or not.\n */\nexport function hasUndo( state ) {\n\treturn Boolean( getUndoEdit( state ) );\n}\n\n/**\n * Returns true if there is a next edit from the current undo offset\n * for the entity records edits history, and false otherwise.\n *\n * @param {Object} state State tree.\n *\n * @return {boolean} Whether there is a next edit or not.\n */\nexport function hasRedo( state ) {\n\treturn Boolean( getRedoEdit( state ) );\n}\n\n/**\n * Return the current theme.\n *\n * @param {Object} state Data state.\n *\n * @return {Object} The current theme.\n */\nexport function getCurrentTheme( state ) {\n\treturn getEntityRecord( state, 'root', 'theme', state.currentTheme );\n}\n\n/**\n * Return the ID of the current global styles object.\n *\n * @param {Object} state Data state.\n *\n * @return {string} The current global styles ID.\n */\nexport function __experimentalGetCurrentGlobalStylesId( state ) {\n\treturn state.currentGlobalStylesId;\n}\n\n/**\n * Return theme supports data in the index.\n *\n * @param {Object} state Data state.\n *\n * @return {*} Index data.\n */\nexport function getThemeSupports( state ) {\n\treturn getCurrentTheme( state )?.theme_supports ?? EMPTY_OBJECT;\n}\n\n/**\n * Returns the embed preview for the given URL.\n *\n * @param {Object} state Data state.\n * @param {string} url   Embedded URL.\n *\n * @return {*} Undefined if the preview has not been fetched, otherwise, the preview fetched from the embed preview API.\n */\nexport function getEmbedPreview( state, url ) {\n\treturn state.embedPreviews[ url ];\n}\n\n/**\n * Determines if the returned preview is an oEmbed link fallback.\n *\n * WordPress can be configured to return a simple link to a URL if it is not embeddable.\n * We need to be able to determine if a URL is embeddable or not, based on what we\n * get back from the oEmbed preview API.\n *\n * @param {Object} state Data state.\n * @param {string} url   Embedded URL.\n *\n * @return {boolean} Is the preview for the URL an oEmbed link fallback.\n */\nexport function isPreviewEmbedFallback( state, url ) {\n\tconst preview = state.embedPreviews[ url ];\n\tconst oEmbedLinkCheck = '<a href=\"' + url + '\">' + url + '</a>';\n\tif ( ! preview ) {\n\t\treturn false;\n\t}\n\treturn preview.html === oEmbedLinkCheck;\n}\n\n/**\n * Returns whether the current user can perform the given action on the given\n * REST resource.\n *\n * Calling this may trigger an OPTIONS request to the REST API via the\n * `canUser()` resolver.\n *\n * https://developer.wordpress.org/rest-api/reference/\n *\n * @param {Object}  state    Data state.\n * @param {string}  action   Action to check. One of: 'create', 'read', 'update', 'delete'.\n * @param {string}  resource REST resource to check, e.g. 'media' or 'posts'.\n * @param {string=} id       Optional ID of the rest resource to check.\n *\n * @return {boolean|undefined} Whether or not the user can perform the action,\n *                             or `undefined` if the OPTIONS request is still being made.\n */\nexport function canUser( state, action, resource, id ) {\n\tconst key = compact( [ action, resource, id ] ).join( '/' );\n\treturn get( state, [ 'userPermissions', key ] );\n}\n\n/**\n * Returns whether the current user can edit the given entity.\n *\n * Calling this may trigger an OPTIONS request to the REST API via the\n * `canUser()` resolver.\n *\n * https://developer.wordpress.org/rest-api/reference/\n *\n * @param {Object} state    Data state.\n * @param {string} kind     Entity kind.\n * @param {string} name     Entity name.\n * @param {string} recordId Record's id.\n * @return {boolean|undefined} Whether or not the user can edit,\n * or `undefined` if the OPTIONS request is still being made.\n */\nexport function canUserEditEntityRecord( state, kind, name, recordId ) {\n\tconst entityConfig = getEntityConfig( state, kind, name );\n\tif ( ! entityConfig ) {\n\t\treturn false;\n\t}\n\tconst resource = entityConfig.__unstable_rest_base;\n\n\treturn canUser( state, 'update', resource, recordId );\n}\n\n/**\n * Returns the latest autosaves for the post.\n *\n * May return multiple autosaves since the backend stores one autosave per\n * author for each post.\n *\n * @param {Object} state    State tree.\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n *\n * @return {?Array} An array of autosaves for the post, or undefined if there is none.\n */\nexport function getAutosaves( state, postType, postId ) {\n\treturn state.autosaves[ postId ];\n}\n\n/**\n * Returns the autosave for the post and author.\n *\n * @param {Object} state    State tree.\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n * @param {number} authorId The id of the author.\n *\n * @return {?Object} The autosave for the post and author.\n */\nexport function getAutosave( state, postType, postId, authorId ) {\n\tif ( authorId === undefined ) {\n\t\treturn;\n\t}\n\n\tconst autosaves = state.autosaves[ postId ];\n\treturn find( autosaves, { author: authorId } );\n}\n\n/**\n * Returns true if the REST request for autosaves has completed.\n *\n * @param {Object} state    State tree.\n * @param {string} postType The type of the parent post.\n * @param {number} postId   The id of the parent post.\n *\n * @return {boolean} True if the REST request was completed. False otherwise.\n */\nexport const hasFetchedAutosaves = createRegistrySelector(\n\t( select ) => ( state, postType, postId ) => {\n\t\treturn select( STORE_NAME ).hasFinishedResolution( 'getAutosaves', [\n\t\t\tpostType,\n\t\t\tpostId,\n\t\t] );\n\t}\n);\n\n/**\n * Returns a new reference when edited values have changed. This is useful in\n * inferring where an edit has been made between states by comparison of the\n * return values using strict equality.\n *\n * @example\n *\n * ```\n * const hasEditOccurred = (\n *    getReferenceByDistinctEdits( beforeState ) !==\n *    getReferenceByDistinctEdits( afterState )\n * );\n * ```\n *\n * @param {Object} state Editor state.\n *\n * @return {*} A value whose reference will change only when an edit occurs.\n */\nexport const getReferenceByDistinctEdits = createSelector(\n\t() => [],\n\t( state ) => [\n\t\tstate.undo.length,\n\t\tstate.undo.offset,\n\t\tstate.undo.flattenedUndo,\n\t]\n);\n\n/**\n * Retrieve the frontend template used for a given link.\n *\n * @param {Object} state Editor state.\n * @param {string} link  Link.\n *\n * @return {Object?} The template record.\n */\nexport function __experimentalGetTemplateForLink( state, link ) {\n\tconst records = getEntityRecords( state, 'postType', 'wp_template', {\n\t\t'find-template': link,\n\t} );\n\n\tconst template = records?.length ? records[ 0 ] : null;\n\tif ( template ) {\n\t\treturn getEditedEntityRecord(\n\t\t\tstate,\n\t\t\t'postType',\n\t\t\t'wp_template',\n\t\t\ttemplate.id\n\t\t);\n\t}\n\treturn template;\n}\n\n/**\n * Retrieve the current theme's base global styles\n *\n * @param {Object} state Editor state.\n *\n * @return {Object|null} The Global Styles object.\n */\nexport function __experimentalGetCurrentThemeBaseGlobalStyles( state ) {\n\tconst currentTheme = getCurrentTheme( state );\n\tif ( ! currentTheme ) {\n\t\treturn null;\n\t}\n\treturn state.themeBaseGlobalStyles[ currentTheme.stylesheet ];\n}\n\n/**\n * Return the ID of the current global styles object.\n *\n * @param {Object} state Data state.\n *\n * @return {string|null} The current global styles ID.\n */\nexport function __experimentalGetCurrentThemeGlobalStylesVariations( state ) {\n\tconst currentTheme = getCurrentTheme( state );\n\tif ( ! currentTheme ) {\n\t\treturn null;\n\t}\n\treturn state.themeGlobalStyleVariations[ currentTheme.stylesheet ];\n}\n\n/**\n * Retrieve the list of registered block patterns.\n *\n * @param {Object} state Data state.\n *\n * @return {Array} Block pattern list.\n */\nexport function getBlockPatterns( state ) {\n\treturn state.blockPatterns;\n}\n\n/**\n * Retrieve the list of registered block pattern categories.\n *\n * @param {Object} state Data state.\n *\n * @return {Array} Block pattern category list.\n */\nexport function getBlockPatternCategories( state ) {\n\treturn state.blockPatternCategories;\n}\n"]}