"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = __experimentalUseEntityRecords;

var _url = require("@wordpress/url");

var _useQuerySelect = _interopRequireDefault(require("./use-query-select"));

var _ = require("../");

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

/**
 * Resolves the specified entity records.
 *
 * @param  kind      Kind of the requested entities.
 * @param  name      Name of the requested entities.
 * @param  queryArgs HTTP query for the requested entities.
 * @param  options   Hook options.
 * @example
 * ```js
 * import { useEntityRecord } from '@wordpress/core-data';
 *
 * function PageTitlesList() {
 *   const { records, isResolving } = useEntityRecords( 'postType', 'page' );
 *
 *   if ( isResolving ) {
 *     return 'Loading...';
 *   }
 *
 *   return (
 *     <ul>
 *       {records.map(( page ) => (
 *         <li>{ page.title }</li>
 *       ))}
 *     </ul>
 *   );
 * }
 *
 * // Rendered in the application:
 * // <PageTitlesList />
 * ```
 *
 * In the above example, when `PageTitlesList` is rendered into an
 * application, the list of records and the resolution details will be retrieved from
 * the store state using `getEntityRecords()`, or resolved if missing.
 *
 * @return Entity records data.
 * @template RecordType
 */
function __experimentalUseEntityRecords(kind, name) {
  let queryArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {
    enabled: true
  };
  // Serialize queryArgs to a string that can be safely used as a React dep.
  // We can't just pass queryArgs as one of the deps, because if it is passed
  // as an object literal, then it will be a different object on each call even
  // if the values remain the same.
  const queryAsString = (0, _url.addQueryArgs)('', queryArgs);
  const {
    data: records,
    ...rest
  } = (0, _useQuerySelect.default)(query => {
    if (!options.enabled) {
      return {
        data: []
      };
    }

    return query(_.store).getEntityRecords(kind, name, queryArgs);
  }, [kind, name, queryAsString, options.enabled]);
  return {
    records,
    ...rest
  };
}
//# sourceMappingURL=use-entity-records.js.map