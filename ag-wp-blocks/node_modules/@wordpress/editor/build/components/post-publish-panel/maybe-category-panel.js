"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _lodash = require("lodash");

var _i18n = require("@wordpress/i18n");

var _data = require("@wordpress/data");

var _components = require("@wordpress/components");

var _coreData = require("@wordpress/core-data");

var _hierarchicalTermSelector = _interopRequireDefault(require("../post-taxonomies/hierarchical-term-selector"));

var _store = require("../../store");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function MaybeCategoryPanel() {
  const hasNoCategory = (0, _data.useSelect)(select => {
    var _select$getEntityReco;

    const postType = select(_store.store).getCurrentPostType();
    const categoriesTaxonomy = select(_coreData.store).getTaxonomy('category');
    const defaultCategorySlug = 'uncategorized';
    const defaultCategory = (_select$getEntityReco = select(_coreData.store).getEntityRecords('taxonomy', 'category', {
      slug: defaultCategorySlug
    })) === null || _select$getEntityReco === void 0 ? void 0 : _select$getEntityReco[0];
    const postTypeSupportsCategories = categoriesTaxonomy && (0, _lodash.some)(categoriesTaxonomy.types, type => type === postType);
    const categories = categoriesTaxonomy && select(_store.store).getEditedPostAttribute(categoriesTaxonomy.rest_base); // This boolean should return true if everything is loaded
    // ( categoriesTaxonomy, defaultCategory )
    // and the post has not been assigned a category different than "uncategorized".

    return !!categoriesTaxonomy && !!defaultCategory && postTypeSupportsCategories && ((categories === null || categories === void 0 ? void 0 : categories.length) === 0 || (categories === null || categories === void 0 ? void 0 : categories.length) === 1 && defaultCategory.id === categories[0]);
  }, []);
  const [shouldShowPanel, setShouldShowPanel] = (0, _element.useState)(false);
  (0, _element.useEffect)(() => {
    // We use state to avoid hiding the panel if the user edits the categories
    // and adds one within the panel itself (while visible).
    if (hasNoCategory) {
      setShouldShowPanel(true);
    }
  }, [hasNoCategory]);

  if (!shouldShowPanel) {
    return null;
  }

  const panelBodyTitle = [(0, _i18n.__)('Suggestion:'), (0, _element.createElement)("span", {
    className: "editor-post-publish-panel__link",
    key: "label"
  }, (0, _i18n.__)('Assign a category'))];
  return (0, _element.createElement)(_components.PanelBody, {
    initialOpen: false,
    title: panelBodyTitle
  }, (0, _element.createElement)("p", null, (0, _i18n.__)('Categories provide a helpful way to group related posts together and to quickly tell readers what a post is about.')), (0, _element.createElement)(_hierarchicalTermSelector.default, {
    slug: "category"
  }));
}

var _default = MaybeCategoryPanel;
exports.default = _default;
//# sourceMappingURL=maybe-category-panel.js.map