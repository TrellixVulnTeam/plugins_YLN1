"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ToolsPanelColorDropdown;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classnames = _interopRequireDefault(require("classnames"));

var _components = require("@wordpress/components");

var _control = _interopRequireDefault(require("./control"));

var _useMultipleOriginColorsAndGradients = _interopRequireDefault(require("./use-multiple-origin-colors-and-gradients"));

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function ToolsPanelColorDropdown(_ref) {
  var _settings$gradientVal;

  let {
    settings,
    enableAlpha,
    ...otherProps
  } = _ref;
  const colorGradientSettings = (0, _useMultipleOriginColorsAndGradients.default)();
  const controlSettings = { ...colorGradientSettings,
    clearable: false,
    enableAlpha,
    label: settings.label,
    onColorChange: settings.onColorChange,
    onGradientChange: settings.onGradientChange,
    colorValue: settings.colorValue,
    gradientValue: settings.gradientValue
  };
  const selectedColor = (_settings$gradientVal = settings.gradientValue) !== null && _settings$gradientVal !== void 0 ? _settings$gradientVal : settings.colorValue;
  return (0, _element.createElement)(_components.__experimentalToolsPanelItem, (0, _extends2.default)({
    hasValue: settings.hasValue,
    label: settings.label,
    onDeselect: settings.onDeselect,
    isShownByDefault: settings.isShownByDefault,
    resetAllFilter: settings.resetAllFilter
  }, otherProps, {
    className: "block-editor-tools-panel-color-gradient-settings__item"
  }), (0, _element.createElement)(_components.Dropdown, {
    className: "block-editor-tools-panel-color-dropdown",
    contentClassName: "block-editor-panel-color-gradient-settings__dropdown-content",
    renderToggle: _ref2 => {
      let {
        isOpen,
        onToggle
      } = _ref2;
      return (0, _element.createElement)(_components.Button, {
        onClick: onToggle,
        "aria-expanded": isOpen,
        className: (0, _classnames.default)('block-editor-panel-color-gradient-settings__dropdown', {
          'is-open': isOpen
        })
      }, (0, _element.createElement)(_components.__experimentalHStack, {
        justify: "flex-start"
      }, (0, _element.createElement)(_components.ColorIndicator, {
        className: "block-editor-panel-color-gradient-settings__color-indicator",
        colorValue: selectedColor
      }), (0, _element.createElement)(_components.FlexItem, null, settings.label)));
    },
    renderContent: () => (0, _element.createElement)(_control.default, (0, _extends2.default)({
      showTitle: false,
      __experimentalHasMultipleOrigins: true,
      __experimentalIsRenderedInSidebar: true,
      enableAlpha: true
    }, controlSettings))
  }));
}
//# sourceMappingURL=tools-panel-color-dropdown.js.map