{"version":3,"sources":["@wordpress/block-editor/src/store/selectors.js"],"names":["castArray","first","isArray","isBoolean","last","map","reduce","some","find","filter","mapKeys","orderBy","createSelector","getBlockType","getBlockTypes","getBlockVariations","hasBlockSupport","getPossibleBlockTransformations","parse","switchToBlockType","Platform","applyFilters","symbol","__","create","remove","toHTMLString","deprecated","mapRichTextSettings","MILLISECONDS_PER_HOUR","MILLISECONDS_PER_DAY","MILLISECONDS_PER_WEEK","EMPTY_ARRAY","getBlockName","state","clientId","block","blocks","byClientId","socialLinkName","OS","name","attributes","service","isBlockValid","isValid","getBlockAttributes","getBlock","tree","__unstableGetBlockWithoutInnerBlocks","getBlocks","rootClientId","treeKey","areInnerBlocksControlled","innerBlocks","__unstableGetClientIdWithClientIdsTree","__unstableGetClientIdsTree","order","getBlockOrder","getClientIdsOfDescendants","clientIds","collectedIds","givenId","descendantId","push","getClientIdsWithDescendants","topLevelId","getGlobalBlockCount","blockName","length","accumulator","__experimentalGetGlobalBlocksByName","foundBlocks","getBlocksByClientId","getBlockCount","getSelectionStart","selection","selectionStart","getSelectionEnd","selectionEnd","getBlockSelectionStart","getBlockSelectionEnd","getSelectedBlockCount","multiSelectedBlockCount","getMultiSelectedBlockClientIds","hasSelectedBlock","getSelectedBlockClientId","getSelectedBlock","getBlockRootClientId","parents","undefined","getBlockParents","ascending","current","reverse","getBlockParentsByBlockName","id","Array","includes","getBlockHierarchyRootClientId","parent","getLowestCommonAncestorWithSelectedBlock","selectedId","clientParents","selectedParents","lowestCommonAncestor","maxDepth","Math","min","index","getAdjacentBlockClientId","startClientId","modifier","getFirstMultiSelectedBlockClientId","getLastMultiSelectedBlockClientId","orderSet","indexOf","nextIndex","getPreviousBlockClientId","getNextBlockClientId","getSelectedBlocksInitialCaretPosition","initialPosition","getSelectedBlockClientIds","blockOrder","startIndex","endIndex","slice","getMultiSelectedBlocks","multiSelectedBlockClientIds","getDependants","isFirstMultiSelectedBlock","isBlockMultiSelected","isAncestorMultiSelected","ancestorClientId","isMultiSelected","getMultiSelectedBlocksStartClientId","getMultiSelectedBlocksEndClientId","__unstableIsFullySelected","selectionAnchor","selectionFocus","attributeKey","offset","__unstableIsSelectionCollapsed","__unstableIsSelectionMergeable","isForward","anchorRootClientId","focusRootClientId","anchorIndex","focusIndex","targetBlockClientId","blockToMergeClientId","targetBlock","targetBlockType","merge","blockToMerge","blocksToMerge","__unstableGetSelectedBlocksWithPartialSelection","blockA","blockAType","blockB","blockBType","htmlA","htmlB","attributeDefinitionA","attributeDefinitionB","valueA","html","valueB","text","value","getBlockIndex","isBlockSelected","hasSelectedInnerBlock","deep","innerClientId","isBlockWithinSelection","hasMultiSelection","isMultiSelecting","isSelectionEnabled","getBlockMode","blocksMode","isTyping","isDraggingBlocks","draggedBlocks","getDraggedBlockClientIds","isBlockBeingDragged","isAncestorBeingDragged","parentClientId","isCaretWithinFormattedText","since","version","getBlockInsertionPoint","insertionPoint","isBlockInsertionPointVisible","isValidTemplate","template","getTemplate","settings","getTemplateLock","templateLock","blockListSettings","getBlockListSettings","checkAllowList","list","item","defaultResult","canInsertBlockTypeUnmemoized","blockType","allowedBlockTypes","getSettings","isBlockAllowedInEditor","isLocked","parentBlockListSettings","parentAllowedBlocks","allowedBlocks","hasParentAllowedBlock","blockAllowedParentBlocks","parentName","hasBlockAllowedParent","hasBlockAllowedAncestor","blockAllowedAncestorBlocks","ancestor","ancestors","canInsert","bind","canInsertBlockType","canInsertBlocks","every","canRemoveBlock","lock","parentIsLocked","canRemoveBlocks","canMoveBlock","move","canMoveBlocks","canEditBlock","edit","canLockBlockType","nameOrType","canLockBlocks","getInsertUsage","preferences","insertUsage","canIncludeBlockTypeInInserter","getItemFromVariation","variation","variationId","time","count","icon","title","description","category","example","hasOwnProperty","initialAttributes","keywords","frecency","calculateFrecency","duration","Date","now","buildBlockTypeItem","buildScope","isDisabled","blockItemBase","inserterVariations","variations","utility","getInserterItems","buildBlockTypeInserterItem","blockParserTokenizer","buildReusableBlockInserterItem","reusableBlock","content","raw","rawBlockMatch","match","namespace","referencedBlockType","ref","blockTypeInserterItems","reusableBlockInserterItems","getReusableBlocks","items","isDefault","variationMapper","groupByType","core","noncore","type","startsWith","coreItems","nonCoreItems","sortedBlockTypes","getBlockTransformItems","normalizedBlocks","sourceBlock","buildBlockTypeTransformItem","blockTypeTransformItems","itemsByName","Infinity","possibleTransforms","hasInserterItems","hasBlockType","hasReusableBlock","__experimentalGetAllowedBlocks","__experimentalGetDirectInsertBlock","defaultBlock","__experimentalDefaultBlock","directInsert","__experimentalDirectInsert","checkAllowListRecursive","blocksQueue","shift","isAllowed","forEach","innerBlock","__experimentalGetParsedPattern","patternName","patterns","__experimentalBlockPatterns","pattern","__unstableSkipMigrationLogs","getAllAllowedPatterns","parsedPatterns","inserter","allowedPatterns","__experimentalGetAllowedPatterns","availableParsedPatterns","patternsAllowed","__experimentalGetPatternsByBlockTypes","blockNames","normalizedBlockNames","blockTypes","__experimentalGetPatternTransformItems","selectedBlockNames","from","Set","isLastBlockChangePersistent","isPersistentChange","__experimentalGetBlockListSettingsForBlocks","blockListSettingsForBlocks","__experimentalGetReusableBlockTitle","__unstableIsLastBlockChangeIgnored","isIgnoredChange","__experimentalGetLastBlockAttributeChanges","lastBlockAttributesChange","__experimentalReusableBlocks","isNavigationMode","hasBlockMovingClientId","didAutomaticChange","automaticChangeStatus","isBlockHighlighted","highlightedBlock","controlledInnerBlocks","__experimentalGetActiveBlockIdByBlockNames","validBlockNames","selectedBlockClientId","entityAreaParents","wasBlockJustInserted","source","lastBlockInserted","isBlockVisible","visibility","__unstableGetVisibleBlocks","Object","keys","key"],"mappings":"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CA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASsT,kCAAT,CAA6CtT,KAA7C,EAAqD;AAC3D;AACA;AACA;AACA;AACA;AACA,SAAOA,KAAK,CAACG,MAAN,CAAaoT,eAApB;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,0CAAT,CAAqDxT,KAArD,EAA6D;AACnE,SAAOA,KAAK,CAACyT,yBAAb;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAShE,iBAAT,CAA4BzP,KAA5B,EAAoC;AAAA;;AACnC,kCAAOA,KAAP,aAAOA,KAAP,2CAAOA,KAAK,CAAEmK,QAAd,qDAAO,iBAAiBuJ,4BAAxB,yEAAwD5T,WAAxD;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAAS6T,gBAAT,CAA2B3T,KAA3B,EAAmC;AACzC,SAAOA,KAAK,CAAC2T,gBAAb;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,sBAAT,CAAiC5T,KAAjC,EAAyC;AAC/C,SAAOA,KAAK,CAAC4T,sBAAb;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,kBAAT,CAA6B7T,KAA7B,EAAqC;AAC3C,SAAO,CAAC,CAAEA,KAAK,CAAC8T,qBAAhB;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,kBAAT,CAA6B/T,KAA7B,EAAoCC,QAApC,EAA+C;AACrD,SAAOD,KAAK,CAACgU,gBAAN,KAA2B/T,QAAlC;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASkB,wBAAT,CAAmCnB,KAAnC,EAA0CC,QAA1C,EAAqD;AAC3D,SAAO,CAAC,CAAED,KAAK,CAACG,MAAN,CAAa8T,qBAAb,CAAoChU,QAApC,CAAV;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMiU,0CAA0C,GAAGxV,cAAc,CACvE,CAAEsB,KAAF,EAASmU,eAAT,KAA8B;AAC7B,MAAK,CAAEA,eAAe,CAAChS,MAAvB,EAAgC;AAC/B,WAAO,IAAP;AACA,GAH4B,CAI7B;;;AACA,QAAMiS,qBAAqB,GAAGhR,wBAAwB,CAAEpD,KAAF,CAAtD;;AACA,MACCmU,eAAe,CAACnQ,QAAhB,CACCjE,YAAY,CAAEC,KAAF,EAASoU,qBAAT,CADb,CADD,EAIE;AACD,WAAOA,qBAAP;AACA,GAZ4B,CAa7B;;;AACA,QAAMtO,2BAA2B,GAAG5C,8BAA8B,CACjElD,KADiE,CAAlE;AAGA,QAAMqU,iBAAiB,GAAGxQ,0BAA0B,CACnD7D,KADmD,EAEnDoU,qBAAqB,IAAItO,2BAA2B,CAAE,CAAF,CAFD,EAGnDqO,eAHmD,CAApD;;AAKA,MAAKE,iBAAL,EAAyB;AACxB;AACA,WAAOnW,IAAI,CAAEmW,iBAAF,CAAX;AACA;;AACD,SAAO,IAAP;AACA,CA5BsE,EA6BvE,CAAErU,KAAF,EAASmU,eAAT,KAA8B,CAC7BnU,KAAK,CAAC0C,SAAN,CAAgBC,cAAhB,CAA+B1C,QADF,EAE7BD,KAAK,CAAC0C,SAAN,CAAgBG,YAAhB,CAA6B5C,QAFA,EAG7BkU,eAH6B,CA7ByC,CAAjE;AAoCP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,oBAAT,CAA+BtU,KAA/B,EAAsCC,QAAtC,EAAgDsU,MAAhD,EAAyD;AAC/D,QAAM;AAAEC,IAAAA;AAAF,MAAwBxU,KAA9B;AACA,SACCwU,iBAAiB,CAACvU,QAAlB,KAA+BA,QAA/B,IACAuU,iBAAiB,CAACD,MAAlB,KAA6BA,MAF9B;AAIA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,cAAT,CAAyBzU,KAAzB,EAAgCC,QAAhC,EAA2C;AAAA;;AACjD,4DAAOD,KAAK,CAACG,MAAN,CAAauU,UAApB,2DAAO,uBAA2BzU,QAA3B,CAAP,yEAAgD,IAAhD;AACA;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAM0U,0BAA0B,GAAGjW,cAAc,CACrDsB,KAAF,IAAa;AACZ,SAAO,IAAIgT,GAAJ,CACN4B,MAAM,CAACC,IAAP,CAAa7U,KAAK,CAACG,MAAN,CAAauU,UAA1B,EAAuCnW,MAAvC,CACGuW,GAAF,IAAW9U,KAAK,CAACG,MAAN,CAAauU,UAAb,CAAyBI,GAAzB,CADZ,CADM,CAAP;AAKA,CAPsD,EAQrD9U,KAAF,IAAa,CAAEA,KAAK,CAACG,MAAN,CAAauU,UAAf,CAR0C,CAAjD","sourcesContent":["/**\n * External dependencies\n */\nimport {\n\tcastArray,\n\tfirst,\n\tisArray,\n\tisBoolean,\n\tlast,\n\tmap,\n\treduce,\n\tsome,\n\tfind,\n\tfilter,\n\tmapKeys,\n\torderBy,\n} from 'lodash';\nimport createSelector from 'rememo';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tgetBlockType,\n\tgetBlockTypes,\n\tgetBlockVariations,\n\thasBlockSupport,\n\tgetPossibleBlockTransformations,\n\tparse,\n\tswitchToBlockType,\n} from '@wordpress/blocks';\nimport { Platform } from '@wordpress/element';\nimport { applyFilters } from '@wordpress/hooks';\nimport { symbol } from '@wordpress/icons';\nimport { __ } from '@wordpress/i18n';\nimport { create, remove, toHTMLString } from '@wordpress/rich-text';\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Internal dependencies\n */\nimport { mapRichTextSettings } from './utils';\n\n/**\n * A block selection object.\n *\n * @typedef {Object} WPBlockSelection\n *\n * @property {string} clientId     A block client ID.\n * @property {string} attributeKey A block attribute key.\n * @property {number} offset       An attribute value offset, based on the rich\n *                                 text value. See `wp.richText.create`.\n */\n\n// Module constants.\nconst MILLISECONDS_PER_HOUR = 3600 * 1000;\nconst MILLISECONDS_PER_DAY = 24 * 3600 * 1000;\nconst MILLISECONDS_PER_WEEK = 7 * 24 * 3600 * 1000;\n\n/**\n * Shared reference to an empty array for cases where it is important to avoid\n * returning a new array reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n *\n * @type {Array}\n */\nconst EMPTY_ARRAY = [];\n\n/**\n * Returns a block's name given its client ID, or null if no block exists with\n * the client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {string} Block name.\n */\nexport function getBlockName( state, clientId ) {\n\tconst block = state.blocks.byClientId[ clientId ];\n\tconst socialLinkName = 'core/social-link';\n\n\tif ( Platform.OS !== 'web' && block?.name === socialLinkName ) {\n\t\tconst attributes = state.blocks.attributes[ clientId ];\n\t\tconst { service } = attributes;\n\n\t\treturn service ? `${ socialLinkName }-${ service }` : socialLinkName;\n\t}\n\treturn block ? block.name : null;\n}\n\n/**\n * Returns whether a block is valid or not.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Is Valid.\n */\nexport function isBlockValid( state, clientId ) {\n\tconst block = state.blocks.byClientId[ clientId ];\n\treturn !! block && block.isValid;\n}\n\n/**\n * Returns a block's attributes given its client ID, or null if no block exists with\n * the client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object?} Block attributes.\n */\nexport function getBlockAttributes( state, clientId ) {\n\tconst block = state.blocks.byClientId[ clientId ];\n\tif ( ! block ) {\n\t\treturn null;\n\t}\n\n\treturn state.blocks.attributes[ clientId ];\n}\n\n/**\n * Returns a block given its client ID. This is a parsed copy of the block,\n * containing its `blockName`, `clientId`, and current `attributes` state. This\n * is not the block's registration settings, which must be retrieved from the\n * blocks module registration store.\n *\n * getBlock recurses through its inner blocks until all its children blocks have\n * been retrieved. Note that getBlock will not return the child inner blocks of\n * an inner block controller. This is because an inner block controller syncs\n * itself with its own entity, and should therefore not be included with the\n * blocks of a different entity. For example, say you call `getBlocks( TP )` to\n * get the blocks of a template part. If another template part is a child of TP,\n * then the nested template part's child blocks will not be returned. This way,\n * the template block itself is considered part of the parent, but the children\n * are not.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object} Parsed block object.\n */\nexport function getBlock( state, clientId ) {\n\tconst block = state.blocks.byClientId[ clientId ];\n\tif ( ! block ) {\n\t\treturn null;\n\t}\n\n\treturn state.blocks.tree[ clientId ];\n}\n\nexport const __unstableGetBlockWithoutInnerBlocks = createSelector(\n\t( state, clientId ) => {\n\t\tconst block = state.blocks.byClientId[ clientId ];\n\t\tif ( ! block ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\t...block,\n\t\t\tattributes: getBlockAttributes( state, clientId ),\n\t\t};\n\t},\n\t( state, clientId ) => [\n\t\tstate.blocks.byClientId[ clientId ],\n\t\tstate.blocks.attributes[ clientId ],\n\t]\n);\n\n/**\n * Returns all block objects for the current post being edited as an array in\n * the order they appear in the post. Note that this will exclude child blocks\n * of nested inner block controllers.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Object[]} Post blocks.\n */\nexport function getBlocks( state, rootClientId ) {\n\tconst treeKey =\n\t\t! rootClientId || ! areInnerBlocksControlled( state, rootClientId )\n\t\t\t? rootClientId || ''\n\t\t\t: 'controlled||' + rootClientId;\n\treturn state.blocks.tree[ treeKey ]?.innerBlocks || EMPTY_ARRAY;\n}\n\n/**\n * Returns a stripped down block object containing only its client ID,\n * and its inner blocks' client IDs.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Client ID of the block to get.\n *\n * @return {Object} Client IDs of the post blocks.\n */\nexport const __unstableGetClientIdWithClientIdsTree = createSelector(\n\t( state, clientId ) => ( {\n\t\tclientId,\n\t\tinnerBlocks: __unstableGetClientIdsTree( state, clientId ),\n\t} ),\n\t( state ) => [ state.blocks.order ]\n);\n\n/**\n * Returns the block tree represented in the block-editor store from the\n * given root, consisting of stripped down block objects containing only\n * their client IDs, and their inner blocks' client IDs.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Object[]} Client IDs of the post blocks.\n */\nexport const __unstableGetClientIdsTree = createSelector(\n\t( state, rootClientId = '' ) =>\n\t\tmap( getBlockOrder( state, rootClientId ), ( clientId ) =>\n\t\t\t__unstableGetClientIdWithClientIdsTree( state, clientId )\n\t\t),\n\t( state ) => [ state.blocks.order ]\n);\n\n/**\n * Returns an array containing the clientIds of all descendants of the blocks\n * given. Returned ids are ordered first by the order of the ids given, then\n * by the order that they appear in the editor.\n *\n * @param {Object} state     Global application state.\n * @param {Array}  clientIds Array of blocks to inspect.\n *\n * @return {Array} ids of descendants.\n */\nexport const getClientIdsOfDescendants = createSelector(\n\t( state, clientIds ) => {\n\t\tconst collectedIds = [];\n\t\tfor ( const givenId of clientIds ) {\n\t\t\tfor ( const descendantId of getBlockOrder( state, givenId ) ) {\n\t\t\t\tcollectedIds.push(\n\t\t\t\t\tdescendantId,\n\t\t\t\t\t...getClientIdsOfDescendants( state, [ descendantId ] )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn collectedIds;\n\t},\n\t( state ) => [ state.blocks.order ]\n);\n\n/**\n * Returns an array containing the clientIds of the top-level blocks and\n * their descendants of any depth (for nested blocks). Ids are returned\n * in the same order that they appear in the editor.\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} ids of top-level and descendant blocks.\n */\nexport const getClientIdsWithDescendants = createSelector(\n\t( state ) => {\n\t\tconst collectedIds = [];\n\t\tfor ( const topLevelId of getBlockOrder( state ) ) {\n\t\t\tcollectedIds.push(\n\t\t\t\ttopLevelId,\n\t\t\t\t...getClientIdsOfDescendants( state, [ topLevelId ] )\n\t\t\t);\n\t\t}\n\t\treturn collectedIds;\n\t},\n\t( state ) => [ state.blocks.order ]\n);\n\n/**\n * Returns the total number of blocks, or the total number of blocks with a specific name in a post.\n * The number returned includes nested blocks.\n *\n * @param {Object}  state     Global application state.\n * @param {?string} blockName Optional block name, if specified only blocks of that type will be counted.\n *\n * @return {number} Number of blocks in the post, or number of blocks with name equal to blockName.\n */\nexport const getGlobalBlockCount = createSelector(\n\t( state, blockName ) => {\n\t\tconst clientIds = getClientIdsWithDescendants( state );\n\t\tif ( ! blockName ) {\n\t\t\treturn clientIds.length;\n\t\t}\n\t\treturn reduce(\n\t\t\tclientIds,\n\t\t\t( accumulator, clientId ) => {\n\t\t\t\tconst block = state.blocks.byClientId[ clientId ];\n\t\t\t\treturn block.name === blockName ? accumulator + 1 : accumulator;\n\t\t\t},\n\t\t\t0\n\t\t);\n\t},\n\t( state ) => [ state.blocks.order, state.blocks.byClientId ]\n);\n\n/**\n * Returns all global blocks that match a blockName. Results include nested blocks.\n *\n * @param {Object}  state     Global application state.\n * @param {?string} blockName Optional block name, if not specified, returns an empty array.\n *\n * @return {Array} Array of clientIds of blocks with name equal to blockName.\n */\nexport const __experimentalGetGlobalBlocksByName = createSelector(\n\t( state, blockName ) => {\n\t\tif ( ! blockName ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\t\tconst clientIds = getClientIdsWithDescendants( state );\n\t\tconst foundBlocks = clientIds.filter( ( clientId ) => {\n\t\t\tconst block = state.blocks.byClientId[ clientId ];\n\t\t\treturn block.name === blockName;\n\t\t} );\n\t\treturn foundBlocks.length > 0 ? foundBlocks : EMPTY_ARRAY;\n\t},\n\t( state ) => [ state.blocks.order, state.blocks.byClientId ]\n);\n\n/**\n * Given an array of block client IDs, returns the corresponding array of block\n * objects.\n *\n * @param {Object}   state     Editor state.\n * @param {string[]} clientIds Client IDs for which blocks are to be returned.\n *\n * @return {WPBlock[]} Block objects.\n */\nexport const getBlocksByClientId = createSelector(\n\t( state, clientIds ) =>\n\t\tmap( castArray( clientIds ), ( clientId ) =>\n\t\t\tgetBlock( state, clientId )\n\t\t),\n\t( state, clientIds ) =>\n\t\tmap(\n\t\t\tcastArray( clientIds ),\n\t\t\t( clientId ) => state.blocks.tree[ clientId ]\n\t\t)\n);\n\n/**\n * Returns the number of blocks currently present in the post.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {number} Number of blocks in the post.\n */\nexport function getBlockCount( state, rootClientId ) {\n\treturn getBlockOrder( state, rootClientId ).length;\n}\n\n/**\n * Returns the current selection start block client ID, attribute key and text\n * offset.\n *\n * @param {Object} state Block editor state.\n *\n * @return {WPBlockSelection} Selection start information.\n */\nexport function getSelectionStart( state ) {\n\treturn state.selection.selectionStart;\n}\n\n/**\n * Returns the current selection end block client ID, attribute key and text\n * offset.\n *\n * @param {Object} state Block editor state.\n *\n * @return {WPBlockSelection} Selection end information.\n */\nexport function getSelectionEnd( state ) {\n\treturn state.selection.selectionEnd;\n}\n\n/**\n * Returns the current block selection start. This value may be null, and it\n * may represent either a singular block selection or multi-selection start.\n * A selection is singular if its start and end match.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Client ID of block selection start.\n */\nexport function getBlockSelectionStart( state ) {\n\treturn state.selection.selectionStart.clientId;\n}\n\n/**\n * Returns the current block selection end. This value may be null, and it\n * may represent either a singular block selection or multi-selection end.\n * A selection is singular if its start and end match.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Client ID of block selection end.\n */\nexport function getBlockSelectionEnd( state ) {\n\treturn state.selection.selectionEnd.clientId;\n}\n\n/**\n * Returns the number of blocks currently selected in the post.\n *\n * @param {Object} state Global application state.\n *\n * @return {number} Number of blocks selected in the post.\n */\nexport function getSelectedBlockCount( state ) {\n\tconst multiSelectedBlockCount = getMultiSelectedBlockClientIds( state )\n\t\t.length;\n\n\tif ( multiSelectedBlockCount ) {\n\t\treturn multiSelectedBlockCount;\n\t}\n\n\treturn state.selection.selectionStart.clientId ? 1 : 0;\n}\n\n/**\n * Returns true if there is a single selected block, or false otherwise.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether a single block is selected.\n */\nexport function hasSelectedBlock( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\treturn (\n\t\t!! selectionStart.clientId &&\n\t\tselectionStart.clientId === selectionEnd.clientId\n\t);\n}\n\n/**\n * Returns the currently selected block client ID, or null if there is no\n * selected block.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Selected block client ID.\n */\nexport function getSelectedBlockClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\tconst { clientId } = selectionStart;\n\n\tif ( ! clientId || clientId !== selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn clientId;\n}\n\n/**\n * Returns the currently selected block, or null if there is no selected block.\n *\n * @param {Object} state Global application state.\n *\n * @return {?Object} Selected block.\n */\nexport function getSelectedBlock( state ) {\n\tconst clientId = getSelectedBlockClientId( state );\n\treturn clientId ? getBlock( state, clientId ) : null;\n}\n\n/**\n * Given a block client ID, returns the root block from which the block is\n * nested, an empty string for top-level blocks, or null if the block does not\n * exist.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find root client ID.\n *\n * @return {?string} Root client ID, if exists\n */\nexport function getBlockRootClientId( state, clientId ) {\n\treturn state.blocks.parents[ clientId ] !== undefined\n\t\t? state.blocks.parents[ clientId ]\n\t\t: null;\n}\n\n/**\n * Given a block client ID, returns the list of all its parents from top to bottom.\n *\n * @param {Object}  state     Editor state.\n * @param {string}  clientId  Block from which to find root client ID.\n * @param {boolean} ascending Order results from bottom to top (true) or top to bottom (false).\n *\n * @return {Array} ClientIDs of the parent blocks.\n */\nexport const getBlockParents = createSelector(\n\t( state, clientId, ascending = false ) => {\n\t\tconst parents = [];\n\t\tlet current = clientId;\n\t\twhile ( !! state.blocks.parents[ current ] ) {\n\t\t\tcurrent = state.blocks.parents[ current ];\n\t\t\tparents.push( current );\n\t\t}\n\n\t\treturn ascending ? parents : parents.reverse();\n\t},\n\t( state ) => [ state.blocks.parents ]\n);\n\n/**\n * Given a block client ID and a block name, returns the list of all its parents\n * from top to bottom, filtered by the given name(s). For example, if passed\n * 'core/group' as the blockName, it will only return parents which are group\n * blocks. If passed `[ 'core/group', 'core/cover']`, as the blockName, it will\n * return parents which are group blocks and parents which are cover blocks.\n *\n * @param {Object}          state     Editor state.\n * @param {string}          clientId  Block from which to find root client ID.\n * @param {string|string[]} blockName Block name(s) to filter.\n * @param {boolean}         ascending Order results from bottom to top (true) or top to bottom (false).\n *\n * @return {Array} ClientIDs of the parent blocks.\n */\nexport const getBlockParentsByBlockName = createSelector(\n\t( state, clientId, blockName, ascending = false ) => {\n\t\tconst parents = getBlockParents( state, clientId, ascending );\n\t\treturn map(\n\t\t\tfilter(\n\t\t\t\tmap( parents, ( id ) => ( {\n\t\t\t\t\tid,\n\t\t\t\t\tname: getBlockName( state, id ),\n\t\t\t\t} ) ),\n\t\t\t\t( { name } ) => {\n\t\t\t\t\tif ( Array.isArray( blockName ) ) {\n\t\t\t\t\t\treturn blockName.includes( name );\n\t\t\t\t\t}\n\t\t\t\t\treturn name === blockName;\n\t\t\t\t}\n\t\t\t),\n\t\t\t( { id } ) => id\n\t\t);\n\t},\n\t( state ) => [ state.blocks.parents ]\n);\n\n/**\n * Given a block client ID, returns the root of the hierarchy from which the block is nested, return the block itself for root level blocks.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find root client ID.\n *\n * @return {string} Root client ID\n */\nexport function getBlockHierarchyRootClientId( state, clientId ) {\n\tlet current = clientId;\n\tlet parent;\n\tdo {\n\t\tparent = current;\n\t\tcurrent = state.blocks.parents[ current ];\n\t} while ( current );\n\treturn parent;\n}\n\n/**\n * Given a block client ID, returns the lowest common ancestor with selected client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find common ancestor client ID.\n *\n * @return {string} Common ancestor client ID or undefined\n */\nexport function getLowestCommonAncestorWithSelectedBlock( state, clientId ) {\n\tconst selectedId = getSelectedBlockClientId( state );\n\tconst clientParents = [ ...getBlockParents( state, clientId ), clientId ];\n\tconst selectedParents = [\n\t\t...getBlockParents( state, selectedId ),\n\t\tselectedId,\n\t];\n\n\tlet lowestCommonAncestor;\n\n\tconst maxDepth = Math.min( clientParents.length, selectedParents.length );\n\tfor ( let index = 0; index < maxDepth; index++ ) {\n\t\tif ( clientParents[ index ] === selectedParents[ index ] ) {\n\t\t\tlowestCommonAncestor = clientParents[ index ];\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn lowestCommonAncestor;\n}\n\n/**\n * Returns the client ID of the block adjacent one at the given reference\n * startClientId and modifier directionality. Defaults start startClientId to\n * the selected block, and direction as next block. Returns null if there is no\n * adjacent block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n * @param {?number} modifier      Directionality multiplier (1 next, -1\n *                                previous).\n *\n * @return {?string} Return the client ID of the block, or null if none exists.\n */\nexport function getAdjacentBlockClientId( state, startClientId, modifier = 1 ) {\n\t// Default to selected block.\n\tif ( startClientId === undefined ) {\n\t\tstartClientId = getSelectedBlockClientId( state );\n\t}\n\n\t// Try multi-selection starting at extent based on modifier.\n\tif ( startClientId === undefined ) {\n\t\tif ( modifier < 0 ) {\n\t\t\tstartClientId = getFirstMultiSelectedBlockClientId( state );\n\t\t} else {\n\t\t\tstartClientId = getLastMultiSelectedBlockClientId( state );\n\t\t}\n\t}\n\n\t// Validate working start client ID.\n\tif ( ! startClientId ) {\n\t\treturn null;\n\t}\n\n\t// Retrieve start block root client ID, being careful to allow the falsey\n\t// empty string top-level root by explicitly testing against null.\n\tconst rootClientId = getBlockRootClientId( state, startClientId );\n\tif ( rootClientId === null ) {\n\t\treturn null;\n\t}\n\n\tconst { order } = state.blocks;\n\tconst orderSet = order[ rootClientId ];\n\tconst index = orderSet.indexOf( startClientId );\n\tconst nextIndex = index + 1 * modifier;\n\n\t// Block was first in set and we're attempting to get previous.\n\tif ( nextIndex < 0 ) {\n\t\treturn null;\n\t}\n\n\t// Block was last in set and we're attempting to get next.\n\tif ( nextIndex === orderSet.length ) {\n\t\treturn null;\n\t}\n\n\t// Assume incremented index is within the set.\n\treturn orderSet[ nextIndex ];\n}\n\n/**\n * Returns the previous block's client ID from the given reference start ID.\n * Defaults start to the selected block. Returns null if there is no previous\n * block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n *\n * @return {?string} Adjacent block's client ID, or null if none exists.\n */\nexport function getPreviousBlockClientId( state, startClientId ) {\n\treturn getAdjacentBlockClientId( state, startClientId, -1 );\n}\n\n/**\n * Returns the next block's client ID from the given reference start ID.\n * Defaults start to the selected block. Returns null if there is no next\n * block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n *\n * @return {?string} Adjacent block's client ID, or null if none exists.\n */\nexport function getNextBlockClientId( state, startClientId ) {\n\treturn getAdjacentBlockClientId( state, startClientId, 1 );\n}\n\n/* eslint-disable jsdoc/valid-types */\n/**\n * Returns the initial caret position for the selected block.\n * This position is to used to position the caret properly when the selected block changes.\n * If the current block is not a RichText, having initial position set to 0 means \"focus block\"\n *\n * @param {Object} state Global application state.\n *\n * @return {0|-1|null} Initial position.\n */\nexport function getSelectedBlocksInitialCaretPosition( state ) {\n\t/* eslint-enable jsdoc/valid-types */\n\treturn state.initialPosition;\n}\n\n/**\n * Returns the current selection set of block client IDs (multiselection or single selection).\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block client IDs.\n */\nexport const getSelectedBlockClientIds = createSelector(\n\t( state ) => {\n\t\tconst { selectionStart, selectionEnd } = state.selection;\n\n\t\tif (\n\t\t\tselectionStart.clientId === undefined ||\n\t\t\tselectionEnd.clientId === undefined\n\t\t) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\t\treturn [ selectionStart.clientId ];\n\t\t}\n\n\t\t// Retrieve root client ID to aid in retrieving relevant nested block\n\t\t// order, being careful to allow the falsey empty string top-level root\n\t\t// by explicitly testing against null.\n\t\tconst rootClientId = getBlockRootClientId(\n\t\t\tstate,\n\t\t\tselectionStart.clientId\n\t\t);\n\t\tif ( rootClientId === null ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\tconst blockOrder = getBlockOrder( state, rootClientId );\n\t\tconst startIndex = blockOrder.indexOf( selectionStart.clientId );\n\t\tconst endIndex = blockOrder.indexOf( selectionEnd.clientId );\n\n\t\tif ( startIndex > endIndex ) {\n\t\t\treturn blockOrder.slice( endIndex, startIndex + 1 );\n\t\t}\n\n\t\treturn blockOrder.slice( startIndex, endIndex + 1 );\n\t},\n\t( state ) => [\n\t\tstate.blocks.order,\n\t\tstate.selection.selectionStart.clientId,\n\t\tstate.selection.selectionEnd.clientId,\n\t]\n);\n\n/**\n * Returns the current multi-selection set of block client IDs, or an empty\n * array if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block client IDs.\n */\nexport function getMultiSelectedBlockClientIds( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn EMPTY_ARRAY;\n\t}\n\n\treturn getSelectedBlockClientIds( state );\n}\n\n/**\n * Returns the current multi-selection set of blocks, or an empty array if\n * there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block objects.\n */\nexport const getMultiSelectedBlocks = createSelector(\n\t( state ) => {\n\t\tconst multiSelectedBlockClientIds = getMultiSelectedBlockClientIds(\n\t\t\tstate\n\t\t);\n\t\tif ( ! multiSelectedBlockClientIds.length ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\treturn multiSelectedBlockClientIds.map( ( clientId ) =>\n\t\t\tgetBlock( state, clientId )\n\t\t);\n\t},\n\t( state ) => [\n\t\t...getSelectedBlockClientIds.getDependants( state ),\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.blocks.attributes,\n\t]\n);\n\n/**\n * Returns the client ID of the first block in the multi-selection set, or null\n * if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} First block client ID in the multi-selection set.\n */\nexport function getFirstMultiSelectedBlockClientId( state ) {\n\treturn first( getMultiSelectedBlockClientIds( state ) ) || null;\n}\n\n/**\n * Returns the client ID of the last block in the multi-selection set, or null\n * if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Last block client ID in the multi-selection set.\n */\nexport function getLastMultiSelectedBlockClientId( state ) {\n\treturn last( getMultiSelectedBlockClientIds( state ) ) || null;\n}\n\n/**\n * Returns true if a multi-selection exists, and the block corresponding to the\n * specified client ID is the first block of the multi-selection set, or false\n * otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is first in multi-selection.\n */\nexport function isFirstMultiSelectedBlock( state, clientId ) {\n\treturn getFirstMultiSelectedBlockClientId( state ) === clientId;\n}\n\n/**\n * Returns true if the client ID occurs within the block multi-selection, or\n * false otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is in multi-selection set.\n */\nexport function isBlockMultiSelected( state, clientId ) {\n\treturn getMultiSelectedBlockClientIds( state ).indexOf( clientId ) !== -1;\n}\n\n/**\n * Returns true if an ancestor of the block is multi-selected, or false\n * otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether an ancestor of the block is in multi-selection\n *                   set.\n */\nexport const isAncestorMultiSelected = createSelector(\n\t( state, clientId ) => {\n\t\tlet ancestorClientId = clientId;\n\t\tlet isMultiSelected = false;\n\t\twhile ( ancestorClientId && ! isMultiSelected ) {\n\t\t\tancestorClientId = getBlockRootClientId( state, ancestorClientId );\n\t\t\tisMultiSelected = isBlockMultiSelected( state, ancestorClientId );\n\t\t}\n\t\treturn isMultiSelected;\n\t},\n\t( state ) => [\n\t\tstate.blocks.order,\n\t\tstate.selection.selectionStart.clientId,\n\t\tstate.selection.selectionEnd.clientId,\n\t]\n);\n\n/**\n * Returns the client ID of the block which begins the multi-selection set, or\n * null if there is no multi-selection.\n *\n * This is not necessarily the first client ID in the selection.\n *\n * @see getFirstMultiSelectedBlockClientId\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Client ID of block beginning multi-selection.\n */\nexport function getMultiSelectedBlocksStartClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn selectionStart.clientId || null;\n}\n\n/**\n * Returns the client ID of the block which ends the multi-selection set, or\n * null if there is no multi-selection.\n *\n * This is not necessarily the last client ID in the selection.\n *\n * @see getLastMultiSelectedBlockClientId\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Client ID of block ending multi-selection.\n */\nexport function getMultiSelectedBlocksEndClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn selectionEnd.clientId || null;\n}\n\n/**\n * Returns true if the selection is not partial.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether the selection is mergeable.\n */\nexport function __unstableIsFullySelected( state ) {\n\tconst selectionAnchor = getSelectionStart( state );\n\tconst selectionFocus = getSelectionEnd( state );\n\treturn (\n\t\t! selectionAnchor.attributeKey &&\n\t\t! selectionFocus.attributeKey &&\n\t\ttypeof selectionAnchor.offset === 'undefined' &&\n\t\ttypeof selectionFocus.offset === 'undefined'\n\t);\n}\n\n/**\n * Returns true if the selection is collapsed.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether the selection is collapsed.\n */\nexport function __unstableIsSelectionCollapsed( state ) {\n\tconst selectionAnchor = getSelectionStart( state );\n\tconst selectionFocus = getSelectionEnd( state );\n\treturn (\n\t\t!! selectionAnchor &&\n\t\t!! selectionFocus &&\n\t\tselectionAnchor.clientId === selectionFocus.clientId &&\n\t\tselectionAnchor.attributeKey === selectionFocus.attributeKey &&\n\t\tselectionAnchor.offset === selectionFocus.offset\n\t);\n}\n\n/**\n * Check whether the selection is mergeable.\n *\n * @param {Object}  state     Editor state.\n * @param {boolean} isForward Whether to merge forwards.\n *\n * @return {boolean} Whether the selection is mergeable.\n */\nexport function __unstableIsSelectionMergeable( state, isForward ) {\n\tconst selectionAnchor = getSelectionStart( state );\n\tconst selectionFocus = getSelectionEnd( state );\n\n\t// It's not mergeable if the start and end are within the same block.\n\tif ( selectionAnchor.clientId === selectionFocus.clientId ) return false;\n\n\t// It's not mergeable if there's no rich text selection.\n\tif (\n\t\t! selectionAnchor.attributeKey ||\n\t\t! selectionFocus.attributeKey ||\n\t\ttypeof selectionAnchor.offset === 'undefined' ||\n\t\ttypeof selectionFocus.offset === 'undefined'\n\t)\n\t\treturn false;\n\n\tconst anchorRootClientId = getBlockRootClientId(\n\t\tstate,\n\t\tselectionAnchor.clientId\n\t);\n\tconst focusRootClientId = getBlockRootClientId(\n\t\tstate,\n\t\tselectionFocus.clientId\n\t);\n\n\t// It's not mergeable if the selection doesn't start and end in the same\n\t// block list. Maybe in the future it should be allowed.\n\tif ( anchorRootClientId !== focusRootClientId ) {\n\t\treturn false;\n\t}\n\n\tconst blockOrder = getBlockOrder( state, anchorRootClientId );\n\tconst anchorIndex = blockOrder.indexOf( selectionAnchor.clientId );\n\tconst focusIndex = blockOrder.indexOf( selectionFocus.clientId );\n\n\t// Reassign selection start and end based on order.\n\tlet selectionStart, selectionEnd;\n\n\tif ( anchorIndex > focusIndex ) {\n\t\tselectionStart = selectionFocus;\n\t\tselectionEnd = selectionAnchor;\n\t} else {\n\t\tselectionStart = selectionAnchor;\n\t\tselectionEnd = selectionFocus;\n\t}\n\n\tconst targetBlockClientId = isForward\n\t\t? selectionEnd.clientId\n\t\t: selectionStart.clientId;\n\tconst blockToMergeClientId = isForward\n\t\t? selectionStart.clientId\n\t\t: selectionEnd.clientId;\n\n\tconst targetBlock = getBlock( state, targetBlockClientId );\n\tconst targetBlockType = getBlockType( targetBlock.name );\n\n\tif ( ! targetBlockType.merge ) return false;\n\n\tconst blockToMerge = getBlock( state, blockToMergeClientId );\n\n\t// It's mergeable if the blocks are of the same type.\n\tif ( blockToMerge.name === targetBlock.name ) return true;\n\n\t// If the blocks are of a different type, try to transform the block being\n\t// merged into the same type of block.\n\tconst blocksToMerge = switchToBlockType( blockToMerge, targetBlock.name );\n\n\treturn blocksToMerge && blocksToMerge.length;\n}\n\n/**\n * Get partial selected blocks with their content updated\n * based on the selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object[]} Updated partial selected blocks.\n */\nexport const __unstableGetSelectedBlocksWithPartialSelection = ( state ) => {\n\tconst selectionAnchor = getSelectionStart( state );\n\tconst selectionFocus = getSelectionEnd( state );\n\n\tif ( selectionAnchor.clientId === selectionFocus.clientId ) {\n\t\treturn EMPTY_ARRAY;\n\t}\n\n\t// Can't split if the selection is not set.\n\tif (\n\t\t! selectionAnchor.attributeKey ||\n\t\t! selectionFocus.attributeKey ||\n\t\ttypeof selectionAnchor.offset === 'undefined' ||\n\t\ttypeof selectionFocus.offset === 'undefined'\n\t) {\n\t\treturn EMPTY_ARRAY;\n\t}\n\n\tconst anchorRootClientId = getBlockRootClientId(\n\t\tstate,\n\t\tselectionAnchor.clientId\n\t);\n\tconst focusRootClientId = getBlockRootClientId(\n\t\tstate,\n\t\tselectionFocus.clientId\n\t);\n\n\t// It's not splittable if the selection doesn't start and end in the same\n\t// block list. Maybe in the future it should be allowed.\n\tif ( anchorRootClientId !== focusRootClientId ) {\n\t\treturn EMPTY_ARRAY;\n\t}\n\n\tconst blockOrder = getBlockOrder( state, anchorRootClientId );\n\tconst anchorIndex = blockOrder.indexOf( selectionAnchor.clientId );\n\tconst focusIndex = blockOrder.indexOf( selectionFocus.clientId );\n\n\t// Reassign selection start and end based on order.\n\tconst [ selectionStart, selectionEnd ] =\n\t\tanchorIndex > focusIndex\n\t\t\t? [ selectionFocus, selectionAnchor ]\n\t\t\t: [ selectionAnchor, selectionFocus ];\n\n\tconst blockA = getBlock( state, selectionStart.clientId );\n\tconst blockAType = getBlockType( blockA.name );\n\n\tconst blockB = getBlock( state, selectionEnd.clientId );\n\tconst blockBType = getBlockType( blockB.name );\n\n\tconst htmlA = blockA.attributes[ selectionStart.attributeKey ];\n\tconst htmlB = blockB.attributes[ selectionEnd.attributeKey ];\n\n\tconst attributeDefinitionA =\n\t\tblockAType.attributes[ selectionStart.attributeKey ];\n\tconst attributeDefinitionB =\n\t\tblockBType.attributes[ selectionEnd.attributeKey ];\n\n\tlet valueA = create( {\n\t\thtml: htmlA,\n\t\t...mapRichTextSettings( attributeDefinitionA ),\n\t} );\n\tlet valueB = create( {\n\t\thtml: htmlB,\n\t\t...mapRichTextSettings( attributeDefinitionB ),\n\t} );\n\n\tvalueA = remove( valueA, 0, selectionStart.offset );\n\tvalueB = remove( valueB, selectionEnd.offset, valueB.text.length );\n\n\treturn [\n\t\t{\n\t\t\t...blockA,\n\t\t\tattributes: {\n\t\t\t\t...blockA.attributes,\n\t\t\t\t[ selectionStart.attributeKey ]: toHTMLString( {\n\t\t\t\t\tvalue: valueA,\n\t\t\t\t\t...mapRichTextSettings( attributeDefinitionA ),\n\t\t\t\t} ),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\t...blockB,\n\t\t\tattributes: {\n\t\t\t\t...blockB.attributes,\n\t\t\t\t[ selectionEnd.attributeKey ]: toHTMLString( {\n\t\t\t\t\tvalue: valueB,\n\t\t\t\t\t...mapRichTextSettings( attributeDefinitionB ),\n\t\t\t\t} ),\n\t\t\t},\n\t\t},\n\t];\n};\n\n/**\n * Returns an array containing all block client IDs in the editor in the order\n * they appear. Optionally accepts a root client ID of the block list for which\n * the order should be returned, defaulting to the top-level block order.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Array} Ordered client IDs of editor blocks.\n */\nexport function getBlockOrder( state, rootClientId ) {\n\treturn state.blocks.order[ rootClientId || '' ] || EMPTY_ARRAY;\n}\n\n/**\n * Returns the index at which the block corresponding to the specified client\n * ID occurs within the block order, or `-1` if the block does not exist.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {number} Index at which block exists in order.\n */\nexport function getBlockIndex( state, clientId ) {\n\tconst rootClientId = getBlockRootClientId( state, clientId );\n\treturn getBlockOrder( state, rootClientId ).indexOf( clientId );\n}\n\n/**\n * Returns true if the block corresponding to the specified client ID is\n * currently selected and no multi-selection exists, or false otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is selected and multi-selection exists.\n */\nexport function isBlockSelected( state, clientId ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId !== selectionEnd.clientId ) {\n\t\treturn false;\n\t}\n\n\treturn selectionStart.clientId === clientId;\n}\n\n/**\n * Returns true if one of the block's inner blocks is selected.\n *\n * @param {Object}  state    Editor state.\n * @param {string}  clientId Block client ID.\n * @param {boolean} deep     Perform a deep check.\n *\n * @return {boolean} Whether the block as an inner block selected\n */\nexport function hasSelectedInnerBlock( state, clientId, deep = false ) {\n\treturn some(\n\t\tgetBlockOrder( state, clientId ),\n\t\t( innerClientId ) =>\n\t\t\tisBlockSelected( state, innerClientId ) ||\n\t\t\tisBlockMultiSelected( state, innerClientId ) ||\n\t\t\t( deep && hasSelectedInnerBlock( state, innerClientId, deep ) )\n\t);\n}\n\n/**\n * Returns true if the block corresponding to the specified client ID is\n * currently selected but isn't the last of the selected blocks. Here \"last\"\n * refers to the block sequence in the document, _not_ the sequence of\n * multi-selection, which is why `state.selectionEnd` isn't used.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is selected and not the last in the\n *                   selection.\n */\nexport function isBlockWithinSelection( state, clientId ) {\n\tif ( ! clientId ) {\n\t\treturn false;\n\t}\n\n\tconst clientIds = getMultiSelectedBlockClientIds( state );\n\tconst index = clientIds.indexOf( clientId );\n\treturn index > -1 && index < clientIds.length - 1;\n}\n\n/**\n * Returns true if a multi-selection has been made, or false otherwise.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether multi-selection has been made.\n */\nexport function hasMultiSelection( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\treturn selectionStart.clientId !== selectionEnd.clientId;\n}\n\n/**\n * Whether in the process of multi-selecting or not. This flag is only true\n * while the multi-selection is being selected (by mouse move), and is false\n * once the multi-selection has been settled.\n *\n * @see hasMultiSelection\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} True if multi-selecting, false if not.\n */\nexport function isMultiSelecting( state ) {\n\treturn state.isMultiSelecting;\n}\n\n/**\n * Selector that returns if multi-selection is enabled or not.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} True if it should be possible to multi-select blocks, false if multi-selection is disabled.\n */\nexport function isSelectionEnabled( state ) {\n\treturn state.isSelectionEnabled;\n}\n\n/**\n * Returns the block's editing mode, defaulting to \"visual\" if not explicitly\n * assigned.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object} Block editing mode.\n */\nexport function getBlockMode( state, clientId ) {\n\treturn state.blocksMode[ clientId ] || 'visual';\n}\n\n/**\n * Returns true if the user is typing, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether user is typing.\n */\nexport function isTyping( state ) {\n\treturn state.isTyping;\n}\n\n/**\n * Returns true if the user is dragging blocks, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether user is dragging blocks.\n */\nexport function isDraggingBlocks( state ) {\n\treturn !! state.draggedBlocks.length;\n}\n\n/**\n * Returns the client ids of any blocks being directly dragged.\n *\n * This does not include children of a parent being dragged.\n *\n * @param {Object} state Global application state.\n *\n * @return {string[]} Array of dragged block client ids.\n */\nexport function getDraggedBlockClientIds( state ) {\n\treturn state.draggedBlocks;\n}\n\n/**\n * Returns whether the block is being dragged.\n *\n * Only returns true if the block is being directly dragged,\n * not if the block is a child of a parent being dragged.\n * See `isAncestorBeingDragged` for child blocks.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId Client id for block to check.\n *\n * @return {boolean} Whether the block is being dragged.\n */\nexport function isBlockBeingDragged( state, clientId ) {\n\treturn state.draggedBlocks.includes( clientId );\n}\n\n/**\n * Returns whether a parent/ancestor of the block is being dragged.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId Client id for block to check.\n *\n * @return {boolean} Whether the block's ancestor is being dragged.\n */\nexport function isAncestorBeingDragged( state, clientId ) {\n\t// Return early if no blocks are being dragged rather than\n\t// the more expensive check for parents.\n\tif ( ! isDraggingBlocks( state ) ) {\n\t\treturn false;\n\t}\n\n\tconst parents = getBlockParents( state, clientId );\n\treturn some( parents, ( parentClientId ) =>\n\t\tisBlockBeingDragged( state, parentClientId )\n\t);\n}\n\n/**\n * Returns true if the caret is within formatted text, or false otherwise.\n *\n * @deprecated\n *\n * @return {boolean} Whether the caret is within formatted text.\n */\nexport function isCaretWithinFormattedText() {\n\tdeprecated(\n\t\t'wp.data.select( \"core/block-editor\" ).isCaretWithinFormattedText',\n\t\t{\n\t\t\tsince: '6.1',\n\t\t\tversion: '6.3',\n\t\t}\n\t);\n\n\treturn false;\n}\n\n/**\n * Returns the insertion point, the index at which the new inserted block would\n * be placed. Defaults to the last index.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} Insertion point object with `rootClientId`, `index`.\n */\nexport function getBlockInsertionPoint( state ) {\n\tlet rootClientId, index;\n\n\tconst {\n\t\tinsertionPoint,\n\t\tselection: { selectionEnd },\n\t} = state;\n\tif ( insertionPoint !== null ) {\n\t\treturn insertionPoint;\n\t}\n\n\tconst { clientId } = selectionEnd;\n\n\tif ( clientId ) {\n\t\trootClientId = getBlockRootClientId( state, clientId ) || undefined;\n\t\tindex = getBlockIndex( state, selectionEnd.clientId, rootClientId ) + 1;\n\t} else {\n\t\tindex = getBlockOrder( state ).length;\n\t}\n\n\treturn { rootClientId, index };\n}\n\n/**\n * Returns true if we should show the block insertion point.\n *\n * @param {Object} state Global application state.\n *\n * @return {?boolean} Whether the insertion point is visible or not.\n */\nexport function isBlockInsertionPointVisible( state ) {\n\treturn state.insertionPoint !== null;\n}\n\n/**\n * Returns whether the blocks matches the template or not.\n *\n * @param {boolean} state\n * @return {?boolean} Whether the template is valid or not.\n */\nexport function isValidTemplate( state ) {\n\treturn state.template.isValid;\n}\n\n/**\n * Returns the defined block template\n *\n * @param {boolean} state\n *\n * @return {?Array} Block Template.\n */\nexport function getTemplate( state ) {\n\treturn state.settings.template;\n}\n\n/**\n * Returns the defined block template lock. Optionally accepts a root block\n * client ID as context, otherwise defaulting to the global context.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional block root client ID.\n *\n * @return {?string} Block Template Lock\n */\nexport function getTemplateLock( state, rootClientId ) {\n\tif ( ! rootClientId ) {\n\t\treturn state.settings.templateLock;\n\t}\n\n\tconst blockListSettings = getBlockListSettings( state, rootClientId );\n\tif ( ! blockListSettings ) {\n\t\treturn null;\n\t}\n\n\treturn blockListSettings.templateLock;\n}\n\nconst checkAllowList = ( list, item, defaultResult = null ) => {\n\tif ( isBoolean( list ) ) {\n\t\treturn list;\n\t}\n\tif ( isArray( list ) ) {\n\t\t// TODO: when there is a canonical way to detect that we are editing a post\n\t\t// the following check should be changed to something like:\n\t\t// if ( list.includes( 'core/post-content' ) && getEditorMode() === 'post-content' && item === null )\n\t\tif ( list.includes( 'core/post-content' ) && item === null ) {\n\t\t\treturn true;\n\t\t}\n\t\treturn list.includes( item );\n\t}\n\treturn defaultResult;\n};\n\n/**\n * Determines if the given block type is allowed to be inserted into the block list.\n * This function is not exported and not memoized because using a memoized selector\n * inside another memoized selector is just a waste of time.\n *\n * @param {Object}        state        Editor state.\n * @param {string|Object} blockName    The block type object, e.g., the response\n *                                     from the block directory; or a string name of\n *                                     an installed block type, e.g.' core/paragraph'.\n * @param {?string}       rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be inserted.\n */\nconst canInsertBlockTypeUnmemoized = (\n\tstate,\n\tblockName,\n\trootClientId = null\n) => {\n\tlet blockType;\n\tif ( blockName && 'object' === typeof blockName ) {\n\t\tblockType = blockName;\n\t\tblockName = blockType.name;\n\t} else {\n\t\tblockType = getBlockType( blockName );\n\t}\n\tif ( ! blockType ) {\n\t\treturn false;\n\t}\n\n\tconst { allowedBlockTypes } = getSettings( state );\n\n\tconst isBlockAllowedInEditor = checkAllowList(\n\t\tallowedBlockTypes,\n\t\tblockName,\n\t\ttrue\n\t);\n\tif ( ! isBlockAllowedInEditor ) {\n\t\treturn false;\n\t}\n\n\tconst isLocked = !! getTemplateLock( state, rootClientId );\n\tif ( isLocked ) {\n\t\treturn false;\n\t}\n\n\tconst parentBlockListSettings = getBlockListSettings( state, rootClientId );\n\n\t// The parent block doesn't have settings indicating it doesn't support\n\t// inner blocks, return false.\n\tif ( rootClientId && parentBlockListSettings === undefined ) {\n\t\treturn false;\n\t}\n\n\tconst parentAllowedBlocks = parentBlockListSettings?.allowedBlocks;\n\tconst hasParentAllowedBlock = checkAllowList(\n\t\tparentAllowedBlocks,\n\t\tblockName\n\t);\n\n\tconst blockAllowedParentBlocks = blockType.parent;\n\tconst parentName = getBlockName( state, rootClientId );\n\tconst hasBlockAllowedParent = checkAllowList(\n\t\tblockAllowedParentBlocks,\n\t\tparentName\n\t);\n\n\tlet hasBlockAllowedAncestor = true;\n\tconst blockAllowedAncestorBlocks = blockType.ancestor;\n\tif ( blockAllowedAncestorBlocks ) {\n\t\tconst ancestors = [\n\t\t\trootClientId,\n\t\t\t...getBlockParents( state, rootClientId ),\n\t\t];\n\n\t\thasBlockAllowedAncestor = some( ancestors, ( ancestorClientId ) =>\n\t\t\tcheckAllowList(\n\t\t\t\tblockAllowedAncestorBlocks,\n\t\t\t\tgetBlockName( state, ancestorClientId )\n\t\t\t)\n\t\t);\n\t}\n\n\tconst canInsert =\n\t\thasBlockAllowedAncestor &&\n\t\t( ( hasParentAllowedBlock === null &&\n\t\t\thasBlockAllowedParent === null ) ||\n\t\t\thasParentAllowedBlock === true ||\n\t\t\thasBlockAllowedParent === true );\n\n\tif ( ! canInsert ) {\n\t\treturn canInsert;\n\t}\n\n\t/**\n\t * This filter is an ad-hoc solution to prevent adding template parts inside post content.\n\t * Conceptually, having a filter inside a selector is bad pattern so this code will be\n\t * replaced by a declarative API that doesn't the following drawbacks:\n\t *\n\t * Filters are not reactive: Upon switching between \"template mode\" and non \"template mode\",\n\t * the filter and selector won't necessarily be executed again. For now, it doesn't matter much\n\t * because you can't switch between the two modes while the inserter stays open.\n\t *\n\t * Filters are global: Once they're defined, they will affect all editor instances and all registries.\n\t * An ideal API would only affect specific editor instances.\n\t */\n\treturn applyFilters(\n\t\t'blockEditor.__unstableCanInsertBlockType',\n\t\tcanInsert,\n\t\tblockType,\n\t\trootClientId,\n\t\t{\n\t\t\t// Pass bound selectors of the current registry. If we're in a nested\n\t\t\t// context, the data will differ from the one selected from the root\n\t\t\t// registry.\n\t\t\tgetBlock: getBlock.bind( null, state ),\n\t\t\tgetBlockParentsByBlockName: getBlockParentsByBlockName.bind(\n\t\t\t\tnull,\n\t\t\t\tstate\n\t\t\t),\n\t\t}\n\t);\n};\n\n/**\n * Determines if the given block type is allowed to be inserted into the block list.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  blockName    The name of the block type, e.g.' core/paragraph'.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be inserted.\n */\nexport const canInsertBlockType = createSelector(\n\tcanInsertBlockTypeUnmemoized,\n\t( state, blockName, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId[ rootClientId ],\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t]\n);\n\n/**\n * Determines if the given blocks are allowed to be inserted into the block\n * list.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientIds    The block client IDs to be inserted.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given blocks are allowed to be inserted.\n */\nexport function canInsertBlocks( state, clientIds, rootClientId = null ) {\n\treturn clientIds.every( ( id ) =>\n\t\tcanInsertBlockType( state, getBlockName( state, id ), rootClientId )\n\t);\n}\n\n/**\n * Determines if the given block is allowed to be deleted.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientId     The block client Id.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block is allowed to be removed.\n */\nexport function canRemoveBlock( state, clientId, rootClientId = null ) {\n\tconst attributes = getBlockAttributes( state, clientId );\n\n\t// attributes can be null if the block is already deleted.\n\tif ( attributes === null ) {\n\t\treturn true;\n\t}\n\n\tconst { lock } = attributes;\n\tconst parentIsLocked = !! getTemplateLock( state, rootClientId );\n\t// If we don't have a lock on the blockType level, we defer to the parent templateLock.\n\tif ( lock === undefined || lock?.remove === undefined ) {\n\t\treturn ! parentIsLocked;\n\t}\n\n\t// When remove is true, it means we cannot remove it.\n\treturn ! lock?.remove;\n}\n\n/**\n * Determines if the given blocks are allowed to be removed.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientIds    The block client IDs to be removed.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given blocks are allowed to be removed.\n */\nexport function canRemoveBlocks( state, clientIds, rootClientId = null ) {\n\treturn clientIds.every( ( clientId ) =>\n\t\tcanRemoveBlock( state, clientId, rootClientId )\n\t);\n}\n\n/**\n * Determines if the given block is allowed to be moved.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientId     The block client Id.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block is allowed to be moved.\n */\nexport function canMoveBlock( state, clientId, rootClientId = null ) {\n\tconst attributes = getBlockAttributes( state, clientId );\n\tif ( attributes === null ) {\n\t\treturn;\n\t}\n\n\tconst { lock } = attributes;\n\tconst parentIsLocked = getTemplateLock( state, rootClientId ) === 'all';\n\t// If we don't have a lock on the blockType level, we defer to the parent templateLock.\n\tif ( lock === undefined || lock?.move === undefined ) {\n\t\treturn ! parentIsLocked;\n\t}\n\n\t// When move is true, it means we cannot move it.\n\treturn ! lock?.move;\n}\n\n/**\n * Determines if the given blocks are allowed to be moved.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientIds    The block client IDs to be moved.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given blocks are allowed to be moved.\n */\nexport function canMoveBlocks( state, clientIds, rootClientId = null ) {\n\treturn clientIds.every( ( clientId ) =>\n\t\tcanMoveBlock( state, clientId, rootClientId )\n\t);\n}\n\n/**\n * Determines if the given block is allowed to be edited.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId The block client Id.\n *\n * @return {boolean} Whether the given block is allowed to be edited.\n */\nexport function canEditBlock( state, clientId ) {\n\tconst attributes = getBlockAttributes( state, clientId );\n\tif ( attributes === null ) {\n\t\treturn true;\n\t}\n\n\tconst { lock } = attributes;\n\n\t// When the edit is true, we cannot edit the block.\n\treturn ! lock?.edit;\n}\n\n/**\n * Determines if the given block type can be locked/unlocked by a user.\n *\n * @param {Object}          state      Editor state.\n * @param {(string|Object)} nameOrType Block name or type object.\n *\n * @return {boolean} Whether a given block type can be locked/unlocked.\n */\nexport function canLockBlockType( state, nameOrType ) {\n\tif ( ! hasBlockSupport( nameOrType, 'lock', true ) ) {\n\t\treturn false;\n\t}\n\n\t// Use block editor settings as the default value.\n\treturn !! state.settings?.canLockBlocks;\n}\n\n/**\n * Returns information about how recently and frequently a block has been inserted.\n *\n * @param {Object} state Global application state.\n * @param {string} id    A string which identifies the insert, e.g. 'core/block/12'\n *\n * @return {?{ time: number, count: number }} An object containing `time` which is when the last\n *                                            insert occurred as a UNIX epoch, and `count` which is\n *                                            the number of inserts that have occurred.\n */\nfunction getInsertUsage( state, id ) {\n\treturn state.preferences.insertUsage?.[ id ] ?? null;\n}\n\n/**\n * Returns whether we can show a block type in the inserter\n *\n * @param {Object}  state        Global State\n * @param {Object}  blockType    BlockType\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be shown in the inserter.\n */\nconst canIncludeBlockTypeInInserter = ( state, blockType, rootClientId ) => {\n\tif ( ! hasBlockSupport( blockType, 'inserter', true ) ) {\n\t\treturn false;\n\t}\n\n\treturn canInsertBlockTypeUnmemoized( state, blockType.name, rootClientId );\n};\n\n/**\n * Return a function to be used to tranform a block variation to an inserter item\n *\n * @param {Object} state Global State\n * @param {Object} item  Denormalized inserter item\n * @return {Function} Function to transform a block variation to inserter item\n */\nconst getItemFromVariation = ( state, item ) => ( variation ) => {\n\tconst variationId = `${ item.id }/${ variation.name }`;\n\tconst { time, count = 0 } = getInsertUsage( state, variationId ) || {};\n\treturn {\n\t\t...item,\n\t\tid: variationId,\n\t\ticon: variation.icon || item.icon,\n\t\ttitle: variation.title || item.title,\n\t\tdescription: variation.description || item.description,\n\t\tcategory: variation.category || item.category,\n\t\t// If `example` is explicitly undefined for the variation, the preview will not be shown.\n\t\texample: variation.hasOwnProperty( 'example' )\n\t\t\t? variation.example\n\t\t\t: item.example,\n\t\tinitialAttributes: {\n\t\t\t...item.initialAttributes,\n\t\t\t...variation.attributes,\n\t\t},\n\t\tinnerBlocks: variation.innerBlocks,\n\t\tkeywords: variation.keywords || item.keywords,\n\t\tfrecency: calculateFrecency( time, count ),\n\t};\n};\n\n/**\n * Returns the calculated frecency.\n *\n * 'frecency' is a heuristic (https://en.wikipedia.org/wiki/Frecency)\n * that combines block usage frequenty and recency.\n *\n * @param {number} time  When the last insert occurred as a UNIX epoch\n * @param {number} count The number of inserts that have occurred.\n *\n * @return {number} The calculated frecency.\n */\nconst calculateFrecency = ( time, count ) => {\n\tif ( ! time ) {\n\t\treturn count;\n\t}\n\t// The selector is cached, which means Date.now() is the last time that the\n\t// relevant state changed. This suits our needs.\n\tconst duration = Date.now() - time;\n\tswitch ( true ) {\n\t\tcase duration < MILLISECONDS_PER_HOUR:\n\t\t\treturn count * 4;\n\t\tcase duration < MILLISECONDS_PER_DAY:\n\t\t\treturn count * 2;\n\t\tcase duration < MILLISECONDS_PER_WEEK:\n\t\t\treturn count / 2;\n\t\tdefault:\n\t\t\treturn count / 4;\n\t}\n};\n\n/**\n * Returns a function that accepts a block type and builds an item to be shown\n * in a specific context. It's used for building items for Inserter and available\n * block Transfroms list.\n *\n * @param {Object} state              Editor state.\n * @param {Object} options            Options object for handling the building of a block type.\n * @param {string} options.buildScope The scope for which the item is going to be used.\n * @return {Function} Function returns an item to be shown in a specific context (Inserter|Transforms list).\n */\nconst buildBlockTypeItem = ( state, { buildScope = 'inserter' } ) => (\n\tblockType\n) => {\n\tconst id = blockType.name;\n\n\tlet isDisabled = false;\n\tif ( ! hasBlockSupport( blockType.name, 'multiple', true ) ) {\n\t\tisDisabled = some(\n\t\t\tgetBlocksByClientId( state, getClientIdsWithDescendants( state ) ),\n\t\t\t{ name: blockType.name }\n\t\t);\n\t}\n\n\tconst { time, count = 0 } = getInsertUsage( state, id ) || {};\n\tconst blockItemBase = {\n\t\tid,\n\t\tname: blockType.name,\n\t\ttitle: blockType.title,\n\t\ticon: blockType.icon,\n\t\tisDisabled,\n\t\tfrecency: calculateFrecency( time, count ),\n\t};\n\tif ( buildScope === 'transform' ) return blockItemBase;\n\n\tconst inserterVariations = getBlockVariations( blockType.name, 'inserter' );\n\treturn {\n\t\t...blockItemBase,\n\t\tinitialAttributes: {},\n\t\tdescription: blockType.description,\n\t\tcategory: blockType.category,\n\t\tkeywords: blockType.keywords,\n\t\tvariations: inserterVariations,\n\t\texample: blockType.example,\n\t\tutility: 1, // Deprecated.\n\t};\n};\n\n/**\n * Determines the items that appear in the inserter. Includes both static\n * items (e.g. a regular block type) and dynamic items (e.g. a reusable block).\n *\n * Each item object contains what's necessary to display a button in the\n * inserter and handle its selection.\n *\n * The 'frecency' property is a heuristic (https://en.wikipedia.org/wiki/Frecency)\n * that combines block usage frequenty and recency.\n *\n * Items are returned ordered descendingly by their 'utility' and 'frecency'.\n *\n * @param    {Object}   state             Editor state.\n * @param    {?string}  rootClientId      Optional root client ID of block list.\n *\n * @return {WPEditorInserterItem[]} Items that appear in inserter.\n *\n * @typedef {Object} WPEditorInserterItem\n * @property {string}   id                Unique identifier for the item.\n * @property {string}   name              The type of block to create.\n * @property {Object}   initialAttributes Attributes to pass to the newly created block.\n * @property {string}   title             Title of the item, as it appears in the inserter.\n * @property {string}   icon              Dashicon for the item, as it appears in the inserter.\n * @property {string}   category          Block category that the item is associated with.\n * @property {string[]} keywords          Keywords that can be searched to find this item.\n * @property {boolean}  isDisabled        Whether or not the user should be prevented from inserting\n *                                        this item.\n * @property {number}   frecency          Heuristic that combines frequency and recency.\n */\nexport const getInserterItems = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tconst buildBlockTypeInserterItem = buildBlockTypeItem( state, {\n\t\t\tbuildScope: 'inserter',\n\t\t} );\n\n\t\t/*\n\t\t * Matches block comment delimiters amid serialized content.\n\t\t *\n\t\t * @see `tokenizer` in `@wordpress/block-serialization-default-parser`\n\t\t * package\n\t\t *\n\t\t * blockParserTokenizer differs from the original tokenizer in the\n\t\t * following ways:\n\t\t *\n\t\t * - removed global flag (/g)\n\t\t * - prepended ^\\s*\n\t\t *\n\t\t */\n\t\tconst blockParserTokenizer = /^\\s*<!--\\s+(\\/)?wp:([a-z][a-z0-9_-]*\\/)?([a-z][a-z0-9_-]*)\\s+({(?:(?=([^}]+|}+(?=})|(?!}\\s+\\/?-->)[^])*)\\5|[^]*?)}\\s+)?(\\/)?-->/;\n\n\t\tconst buildReusableBlockInserterItem = ( reusableBlock ) => {\n\t\t\tlet icon = symbol;\n\n\t\t\t/*\n\t\t\t * Instead of always displaying a generic \"symbol\" icon for every\n\t\t\t * reusable block, try to use an icon that represents the first\n\t\t\t * outermost block contained in the reusable block. This requires\n\t\t\t * scanning the serialized form of the reusable block to find its\n\t\t\t * first block delimiter, then looking up the corresponding block\n\t\t\t * type, if available.\n\t\t\t */\n\t\t\tif ( Platform.OS === 'web' ) {\n\t\t\t\tconst content =\n\t\t\t\t\ttypeof reusableBlock.content.raw === 'string'\n\t\t\t\t\t\t? reusableBlock.content.raw\n\t\t\t\t\t\t: reusableBlock.content;\n\t\t\t\tconst rawBlockMatch = content.match( blockParserTokenizer );\n\t\t\t\tif ( rawBlockMatch ) {\n\t\t\t\t\tconst [\n\t\t\t\t\t\t,\n\t\t\t\t\t\t,\n\t\t\t\t\t\tnamespace = 'core/',\n\t\t\t\t\t\tblockName,\n\t\t\t\t\t] = rawBlockMatch;\n\t\t\t\t\tconst referencedBlockType = getBlockType(\n\t\t\t\t\t\tnamespace + blockName\n\t\t\t\t\t);\n\t\t\t\t\tif ( referencedBlockType ) {\n\t\t\t\t\t\ticon = referencedBlockType.icon;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst id = `core/block/${ reusableBlock.id }`;\n\t\t\tconst { time, count = 0 } = getInsertUsage( state, id ) || {};\n\t\t\tconst frecency = calculateFrecency( time, count );\n\n\t\t\treturn {\n\t\t\t\tid,\n\t\t\t\tname: 'core/block',\n\t\t\t\tinitialAttributes: { ref: reusableBlock.id },\n\t\t\t\ttitle: reusableBlock.title.raw,\n\t\t\t\ticon,\n\t\t\t\tcategory: 'reusable',\n\t\t\t\tkeywords: [],\n\t\t\t\tisDisabled: false,\n\t\t\t\tutility: 1, // Deprecated.\n\t\t\t\tfrecency,\n\t\t\t};\n\t\t};\n\n\t\tconst blockTypeInserterItems = getBlockTypes()\n\t\t\t.filter( ( blockType ) =>\n\t\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t\t)\n\t\t\t.map( buildBlockTypeInserterItem );\n\n\t\tconst reusableBlockInserterItems = canInsertBlockTypeUnmemoized(\n\t\t\tstate,\n\t\t\t'core/block',\n\t\t\trootClientId\n\t\t)\n\t\t\t? getReusableBlocks( state ).map( buildReusableBlockInserterItem )\n\t\t\t: [];\n\n\t\tconst items = blockTypeInserterItems.reduce( ( accumulator, item ) => {\n\t\t\tconst { variations = [] } = item;\n\t\t\t// Exclude any block type item that is to be replaced by a default variation.\n\t\t\tif ( ! variations.some( ( { isDefault } ) => isDefault ) ) {\n\t\t\t\taccumulator.push( item );\n\t\t\t}\n\t\t\tif ( variations.length ) {\n\t\t\t\tconst variationMapper = getItemFromVariation( state, item );\n\t\t\t\taccumulator.push( ...variations.map( variationMapper ) );\n\t\t\t}\n\t\t\treturn accumulator;\n\t\t}, [] );\n\n\t\t// Ensure core blocks are prioritized in the returned results,\n\t\t// because third party blocks can be registered earlier than\n\t\t// the core blocks (usually by using the `init` action),\n\t\t// thus affecting the display order.\n\t\t// We don't sort reusable blocks as they are handled differently.\n\t\tconst groupByType = ( blocks, block ) => {\n\t\t\tconst { core, noncore } = blocks;\n\t\t\tconst type = block.name.startsWith( 'core/' ) ? core : noncore;\n\n\t\t\ttype.push( block );\n\t\t\treturn blocks;\n\t\t};\n\t\tconst {\n\t\t\tcore: coreItems,\n\t\t\tnoncore: nonCoreItems,\n\t\t} = items.reduce( groupByType, { core: [], noncore: [] } );\n\t\tconst sortedBlockTypes = [ ...coreItems, ...nonCoreItems ];\n\t\treturn [ ...sortedBlockTypes, ...reusableBlockInserterItems ];\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.preferences.insertUsage,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetReusableBlocks( state ),\n\t\tgetBlockTypes(),\n\t]\n);\n\n/**\n * Determines the items that appear in the available block transforms list.\n *\n * Each item object contains what's necessary to display a menu item in the\n * transform list and handle its selection.\n *\n * The 'frecency' property is a heuristic (https://en.wikipedia.org/wiki/Frecency)\n * that combines block usage frequenty and recency.\n *\n * Items are returned ordered descendingly by their 'frecency'.\n *\n * @param    {Object}          state        Editor state.\n * @param    {Object|Object[]} blocks       Block object or array objects.\n * @param    {?string}         rootClientId Optional root client ID of block list.\n *\n * @return {WPEditorTransformItem[]} Items that appear in inserter.\n *\n * @typedef {Object} WPEditorTransformItem\n * @property {string}          id           Unique identifier for the item.\n * @property {string}          name         The type of block to create.\n * @property {string}          title        Title of the item, as it appears in the inserter.\n * @property {string}          icon         Dashicon for the item, as it appears in the inserter.\n * @property {boolean}         isDisabled   Whether or not the user should be prevented from inserting\n *                                          this item.\n * @property {number}          frecency     Heuristic that combines frequency and recency.\n */\nexport const getBlockTransformItems = createSelector(\n\t( state, blocks, rootClientId = null ) => {\n\t\tconst normalizedBlocks = castArray( blocks );\n\t\tconst [ sourceBlock ] = normalizedBlocks;\n\t\tconst buildBlockTypeTransformItem = buildBlockTypeItem( state, {\n\t\t\tbuildScope: 'transform',\n\t\t} );\n\t\tconst blockTypeTransformItems = getBlockTypes()\n\t\t\t.filter( ( blockType ) =>\n\t\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t\t)\n\t\t\t.map( buildBlockTypeTransformItem );\n\n\t\tconst itemsByName = mapKeys(\n\t\t\tblockTypeTransformItems,\n\t\t\t( { name } ) => name\n\t\t);\n\n\t\t// Consider unwraping the highest priority.\n\t\titemsByName[ '*' ] = {\n\t\t\tfrecency: +Infinity,\n\t\t\tid: '*',\n\t\t\tisDisabled: false,\n\t\t\tname: '*',\n\t\t\ttitle: __( 'Unwrap' ),\n\t\t\ticon: itemsByName[ sourceBlock?.name ]?.icon,\n\t\t};\n\n\t\tconst possibleTransforms = getPossibleBlockTransformations(\n\t\t\tnormalizedBlocks\n\t\t).reduce( ( accumulator, block ) => {\n\t\t\tif ( block === '*' ) {\n\t\t\t\taccumulator.push( itemsByName[ '*' ] );\n\t\t\t} else if ( itemsByName[ block?.name ] ) {\n\t\t\t\taccumulator.push( itemsByName[ block.name ] );\n\t\t\t}\n\t\t\treturn accumulator;\n\t\t}, [] );\n\t\treturn orderBy(\n\t\t\tpossibleTransforms,\n\t\t\t( block ) => itemsByName[ block.name ].frecency,\n\t\t\t'desc'\n\t\t);\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.preferences.insertUsage,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetBlockTypes(),\n\t]\n);\n\n/**\n * Determines whether there are items to show in the inserter.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Items that appear in inserter.\n */\nexport const hasInserterItems = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tconst hasBlockType = some( getBlockTypes(), ( blockType ) =>\n\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t);\n\t\tif ( hasBlockType ) {\n\t\t\treturn true;\n\t\t}\n\t\tconst hasReusableBlock =\n\t\t\tcanInsertBlockTypeUnmemoized( state, 'core/block', rootClientId ) &&\n\t\t\tgetReusableBlocks( state ).length > 0;\n\n\t\treturn hasReusableBlock;\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetReusableBlocks( state ),\n\t\tgetBlockTypes(),\n\t]\n);\n\n/**\n * Returns the list of allowed inserter blocks for inner blocks children\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Array?} The list of allowed block types.\n */\nexport const __experimentalGetAllowedBlocks = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tif ( ! rootClientId ) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn filter( getBlockTypes(), ( blockType ) =>\n\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t);\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetBlockTypes(),\n\t]\n);\n\n/**\n * Returns the block to be directly inserted by the block appender.\n *\n * @param    {Object}         state            Editor state.\n * @param    {?string}        rootClientId     Optional root client ID of block list.\n *\n * @return {?WPDirectInsertBlock}              The block type to be directly inserted.\n *\n * @typedef {Object} WPDirectInsertBlock\n * @property {string}         name             The type of block.\n * @property {?Object}        attributes       Attributes to pass to the newly created block.\n * @property {?Array<string>} attributesToCopy Attributes to be copied from adjecent blocks when inserted.\n */\nexport const __experimentalGetDirectInsertBlock = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tif ( ! rootClientId ) {\n\t\t\treturn;\n\t\t}\n\t\tconst defaultBlock =\n\t\t\tstate.blockListSettings[ rootClientId ]?.__experimentalDefaultBlock;\n\t\tconst directInsert =\n\t\t\tstate.blockListSettings[ rootClientId ]?.__experimentalDirectInsert;\n\t\tif ( ! defaultBlock || ! directInsert ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( typeof directInsert === 'function' ) {\n\t\t\treturn directInsert( getBlock( state, rootClientId ) )\n\t\t\t\t? defaultBlock\n\t\t\t\t: null;\n\t\t}\n\t\treturn defaultBlock;\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.tree[ rootClientId ],\n\t]\n);\n\nconst checkAllowListRecursive = ( blocks, allowedBlockTypes ) => {\n\tif ( isBoolean( allowedBlockTypes ) ) {\n\t\treturn allowedBlockTypes;\n\t}\n\n\tconst blocksQueue = [ ...blocks ];\n\twhile ( blocksQueue.length > 0 ) {\n\t\tconst block = blocksQueue.shift();\n\n\t\tconst isAllowed = checkAllowList(\n\t\t\tallowedBlockTypes,\n\t\t\tblock.name || block.blockName,\n\t\t\ttrue\n\t\t);\n\t\tif ( ! isAllowed ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tblock.innerBlocks?.forEach( ( innerBlock ) => {\n\t\t\tblocksQueue.push( innerBlock );\n\t\t} );\n\t}\n\n\treturn true;\n};\n\nexport const __experimentalGetParsedPattern = createSelector(\n\t( state, patternName ) => {\n\t\tconst patterns = state.settings.__experimentalBlockPatterns;\n\t\tconst pattern = patterns.find( ( { name } ) => name === patternName );\n\t\tif ( ! pattern ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn {\n\t\t\t...pattern,\n\t\t\tblocks: parse( pattern.content, {\n\t\t\t\t__unstableSkipMigrationLogs: true,\n\t\t\t} ),\n\t\t};\n\t},\n\t( state ) => [ state.settings.__experimentalBlockPatterns ]\n);\n\nconst getAllAllowedPatterns = createSelector(\n\t( state ) => {\n\t\tconst patterns = state.settings.__experimentalBlockPatterns;\n\t\tconst { allowedBlockTypes } = getSettings( state );\n\t\tconst parsedPatterns = patterns\n\t\t\t.filter( ( { inserter = true } ) => !! inserter )\n\t\t\t.map( ( { name } ) =>\n\t\t\t\t__experimentalGetParsedPattern( state, name )\n\t\t\t);\n\t\tconst allowedPatterns = parsedPatterns.filter( ( { blocks } ) =>\n\t\t\tcheckAllowListRecursive( blocks, allowedBlockTypes )\n\t\t);\n\t\treturn allowedPatterns;\n\t},\n\t( state ) => [\n\t\tstate.settings.__experimentalBlockPatterns,\n\t\tstate.settings.allowedBlockTypes,\n\t]\n);\n\n/**\n * Returns the list of allowed patterns for inner blocks children.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional target root client ID.\n *\n * @return {Array?} The list of allowed patterns.\n */\nexport const __experimentalGetAllowedPatterns = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tconst availableParsedPatterns = getAllAllowedPatterns( state );\n\t\tconst patternsAllowed = filter(\n\t\t\tavailableParsedPatterns,\n\t\t\t( { blocks } ) =>\n\t\t\t\tblocks.every( ( { name } ) =>\n\t\t\t\t\tcanInsertBlockType( state, name, rootClientId )\n\t\t\t\t)\n\t\t);\n\n\t\treturn patternsAllowed;\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.settings.__experimentalBlockPatterns,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId[ rootClientId ],\n\t]\n);\n\n/**\n * Returns the list of patterns based on their declared `blockTypes`\n * and a block's name.\n * Patterns can use `blockTypes` to integrate in work flows like\n * suggesting appropriate patterns in a Placeholder state(during insertion)\n * or blocks transformations.\n *\n * @param {Object}          state        Editor state.\n * @param {string|string[]} blockNames   Block's name or array of block names to find matching pattens.\n * @param {?string}         rootClientId Optional target root client ID.\n *\n * @return {Array} The list of matched block patterns based on declared `blockTypes` and block name.\n */\nexport const __experimentalGetPatternsByBlockTypes = createSelector(\n\t( state, blockNames, rootClientId = null ) => {\n\t\tif ( ! blockNames ) return EMPTY_ARRAY;\n\t\tconst patterns = __experimentalGetAllowedPatterns(\n\t\t\tstate,\n\t\t\trootClientId\n\t\t);\n\t\tconst normalizedBlockNames = Array.isArray( blockNames )\n\t\t\t? blockNames\n\t\t\t: [ blockNames ];\n\t\treturn patterns.filter( ( pattern ) =>\n\t\t\tpattern?.blockTypes?.some?.( ( blockName ) =>\n\t\t\t\tnormalizedBlockNames.includes( blockName )\n\t\t\t)\n\t\t);\n\t},\n\t( state, rootClientId ) => [\n\t\t...__experimentalGetAllowedPatterns.getDependants(\n\t\t\tstate,\n\t\t\trootClientId\n\t\t),\n\t]\n);\n\n/**\n * Determines the items that appear in the available pattern transforms list.\n *\n * For now we only handle blocks without InnerBlocks and take into account\n * the `__experimentalRole` property of blocks' attributes for the transformation.\n *\n * We return the first set of possible eligible block patterns,\n * by checking the `blockTypes` property. We still have to recurse through\n * block pattern's blocks and try to find matches from the selected blocks.\n * Now this happens in the consumer to avoid heavy operations in the selector.\n *\n * @param {Object}   state        Editor state.\n * @param {Object[]} blocks       The selected blocks.\n * @param {?string}  rootClientId Optional root client ID of block list.\n *\n * @return {WPBlockPattern[]} Items that are eligible for a pattern transformation.\n */\nexport const __experimentalGetPatternTransformItems = createSelector(\n\t( state, blocks, rootClientId = null ) => {\n\t\tif ( ! blocks ) return EMPTY_ARRAY;\n\t\t/**\n\t\t * For now we only handle blocks without InnerBlocks and take into account\n\t\t * the `__experimentalRole` property of blocks' attributes for the transformation.\n\t\t * Note that the blocks have been retrieved through `getBlock`, which doesn't\n\t\t * return the inner blocks of an inner block controller, so we still need\n\t\t * to check for this case too.\n\t\t */\n\t\tif (\n\t\t\tblocks.some(\n\t\t\t\t( { clientId, innerBlocks } ) =>\n\t\t\t\t\tinnerBlocks.length ||\n\t\t\t\t\tareInnerBlocksControlled( state, clientId )\n\t\t\t)\n\t\t) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\t// Create a Set of the selected block names that is used in patterns filtering.\n\t\tconst selectedBlockNames = Array.from(\n\t\t\tnew Set( blocks.map( ( { name } ) => name ) )\n\t\t);\n\t\t/**\n\t\t * Here we will return first set of possible eligible block patterns,\n\t\t * by checking the `blockTypes` property. We still have to recurse through\n\t\t * block pattern's blocks and try to find matches from the selected blocks.\n\t\t * Now this happens in the consumer to avoid heavy operations in the selector.\n\t\t */\n\t\treturn __experimentalGetPatternsByBlockTypes(\n\t\t\tstate,\n\t\t\tselectedBlockNames,\n\t\t\trootClientId\n\t\t);\n\t},\n\t( state, rootClientId ) => [\n\t\t...__experimentalGetPatternsByBlockTypes.getDependants(\n\t\t\tstate,\n\t\t\trootClientId\n\t\t),\n\t]\n);\n\n/**\n * Returns the Block List settings of a block, if any exist.\n *\n * @param {Object}  state    Editor state.\n * @param {?string} clientId Block client ID.\n *\n * @return {?Object} Block settings of the block if set.\n */\nexport function getBlockListSettings( state, clientId ) {\n\treturn state.blockListSettings[ clientId ];\n}\n\n/**\n * Returns the editor settings.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} The editor settings object.\n */\nexport function getSettings( state ) {\n\treturn state.settings;\n}\n\n/**\n * Returns true if the most recent block change is be considered persistent, or\n * false otherwise. A persistent change is one committed by BlockEditorProvider\n * via its `onChange` callback, in addition to `onInput`.\n *\n * @param {Object} state Block editor state.\n *\n * @return {boolean} Whether the most recent block change was persistent.\n */\nexport function isLastBlockChangePersistent( state ) {\n\treturn state.blocks.isPersistentChange;\n}\n\n/**\n * Returns the block list settings for an array of blocks, if any exist.\n *\n * @param {Object} state     Editor state.\n * @param {Array}  clientIds Block client IDs.\n *\n * @return {Object} An object where the keys are client ids and the values are\n *                  a block list setting object.\n */\nexport const __experimentalGetBlockListSettingsForBlocks = createSelector(\n\t( state, clientIds = [] ) => {\n\t\treturn clientIds.reduce( ( blockListSettingsForBlocks, clientId ) => {\n\t\t\tif ( ! state.blockListSettings[ clientId ] ) {\n\t\t\t\treturn blockListSettingsForBlocks;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...blockListSettingsForBlocks,\n\t\t\t\t[ clientId ]: state.blockListSettings[ clientId ],\n\t\t\t};\n\t\t}, {} );\n\t},\n\t( state ) => [ state.blockListSettings ]\n);\n\n/**\n * Returns the title of a given reusable block\n *\n * @param {Object}        state Global application state.\n * @param {number|string} ref   The shared block's ID.\n *\n * @return {string} The reusable block saved title.\n */\nexport const __experimentalGetReusableBlockTitle = createSelector(\n\t( state, ref ) => {\n\t\tconst reusableBlock = find(\n\t\t\tgetReusableBlocks( state ),\n\t\t\t( block ) => block.id === ref\n\t\t);\n\t\tif ( ! reusableBlock ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn reusableBlock.title?.raw;\n\t},\n\t( state ) => [ getReusableBlocks( state ) ]\n);\n\n/**\n * Returns true if the most recent block change is be considered ignored, or\n * false otherwise. An ignored change is one not to be committed by\n * BlockEditorProvider, neither via `onChange` nor `onInput`.\n *\n * @param {Object} state Block editor state.\n *\n * @return {boolean} Whether the most recent block change was ignored.\n */\nexport function __unstableIsLastBlockChangeIgnored( state ) {\n\t// TODO: Removal Plan: Changes incurred by RECEIVE_BLOCKS should not be\n\t// ignored if in-fact they result in a change in blocks state. The current\n\t// need to ignore changes not a result of user interaction should be\n\t// accounted for in the refactoring of reusable blocks as occurring within\n\t// their own separate block editor / state (#7119).\n\treturn state.blocks.isIgnoredChange;\n}\n\n/**\n * Returns the block attributes changed as a result of the last dispatched\n * action.\n *\n * @param {Object} state Block editor state.\n *\n * @return {Object<string,Object>} Subsets of block attributes changed, keyed\n *                                 by block client ID.\n */\nexport function __experimentalGetLastBlockAttributeChanges( state ) {\n\treturn state.lastBlockAttributesChange;\n}\n\n/**\n * Returns the available reusable blocks\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} Reusable blocks\n */\nfunction getReusableBlocks( state ) {\n\treturn state?.settings?.__experimentalReusableBlocks ?? EMPTY_ARRAY;\n}\n\n/**\n * Returns whether the navigation mode is enabled.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Is navigation mode enabled.\n */\nexport function isNavigationMode( state ) {\n\treturn state.isNavigationMode;\n}\n\n/**\n * Returns whether block moving mode is enabled.\n *\n * @param {Object} state Editor state.\n *\n * @return {string} Client Id of moving block.\n */\nexport function hasBlockMovingClientId( state ) {\n\treturn state.hasBlockMovingClientId;\n}\n\n/**\n * Returns true if the last change was an automatic change, false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the last change was automatic.\n */\nexport function didAutomaticChange( state ) {\n\treturn !! state.automaticChangeStatus;\n}\n\n/**\n * Returns true if the current highlighted block matches the block clientId.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId The block to check.\n *\n * @return {boolean} Whether the block is currently highlighted.\n */\nexport function isBlockHighlighted( state, clientId ) {\n\treturn state.highlightedBlock === clientId;\n}\n\n/**\n * Checks if a given block has controlled inner blocks.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId The block to check.\n *\n * @return {boolean} True if the block has controlled inner blocks.\n */\nexport function areInnerBlocksControlled( state, clientId ) {\n\treturn !! state.blocks.controlledInnerBlocks[ clientId ];\n}\n\n/**\n * Returns the clientId for the first 'active' block of a given array of block names.\n * A block is 'active' if it (or a child) is the selected block.\n * Returns the first match moving up the DOM from the selected block.\n *\n * @param {Object}   state            Global application state.\n * @param {string[]} validBlocksNames The names of block types to check for.\n *\n * @return {string} The matching block's clientId.\n */\nexport const __experimentalGetActiveBlockIdByBlockNames = createSelector(\n\t( state, validBlockNames ) => {\n\t\tif ( ! validBlockNames.length ) {\n\t\t\treturn null;\n\t\t}\n\t\t// Check if selected block is a valid entity area.\n\t\tconst selectedBlockClientId = getSelectedBlockClientId( state );\n\t\tif (\n\t\t\tvalidBlockNames.includes(\n\t\t\t\tgetBlockName( state, selectedBlockClientId )\n\t\t\t)\n\t\t) {\n\t\t\treturn selectedBlockClientId;\n\t\t}\n\t\t// Check if first selected block is a child of a valid entity area.\n\t\tconst multiSelectedBlockClientIds = getMultiSelectedBlockClientIds(\n\t\t\tstate\n\t\t);\n\t\tconst entityAreaParents = getBlockParentsByBlockName(\n\t\t\tstate,\n\t\t\tselectedBlockClientId || multiSelectedBlockClientIds[ 0 ],\n\t\t\tvalidBlockNames\n\t\t);\n\t\tif ( entityAreaParents ) {\n\t\t\t// Last parent closest/most interior.\n\t\t\treturn last( entityAreaParents );\n\t\t}\n\t\treturn null;\n\t},\n\t( state, validBlockNames ) => [\n\t\tstate.selection.selectionStart.clientId,\n\t\tstate.selection.selectionEnd.clientId,\n\t\tvalidBlockNames,\n\t]\n);\n\n/**\n * Tells if the block with the passed clientId was just inserted.\n *\n * @param {Object}  state    Global application state.\n * @param {Object}  clientId Client Id of the block.\n * @param {?string} source   Optional insertion source of the block.\n * @return {boolean} True if the block matches the last block inserted from the specified source.\n */\nexport function wasBlockJustInserted( state, clientId, source ) {\n\tconst { lastBlockInserted } = state;\n\treturn (\n\t\tlastBlockInserted.clientId === clientId &&\n\t\tlastBlockInserted.source === source\n\t);\n}\n\n/**\n * Tells if the block is visible on the canvas or not.\n *\n * @param {Object} state    Global application state.\n * @param {Object} clientId Client Id of the block.\n * @return {boolean} True if the block is visible.\n */\nexport function isBlockVisible( state, clientId ) {\n\treturn state.blocks.visibility?.[ clientId ] ?? true;\n}\n\n/**\n * Returns the list of all hidden blocks.\n *\n * @param {Object} state Global application state.\n * @return {[string]} List of hidden blocks.\n */\nexport const __unstableGetVisibleBlocks = createSelector(\n\t( state ) => {\n\t\treturn new Set(\n\t\t\tObject.keys( state.blocks.visibility ).filter(\n\t\t\t\t( key ) => state.blocks.visibility[ key ]\n\t\t\t)\n\t\t);\n\t},\n\t( state ) => [ state.blocks.visibility ]\n);\n"]}