{"version":3,"sources":["@wordpress/core-data/src/selectors.ts"],"names":["createSelector","set","map","find","get","filter","compact","createRegistrySelector","addQueryArgs","deprecated","STORE_NAME","getQueriedItems","DEFAULT_ENTITY_KEY","getNormalizedCommaSeparable","isRawAttribute","EMPTY_OBJECT","isRequestingEmbedPreview","select","state","url","isResolving","getAuthors","query","since","alternative","path","getUserQueryResults","getCurrentUser","currentUser","queryID","queryResults","users","queries","id","byId","getEntitiesByKind","kind","getEntitiesConfig","entities","config","getEntity","name","getEntityConfig","getEntityRecord","key","queriedState","records","undefined","context","itemIsComplete","items","item","_fields","filteredItem","fields","f","length","field","split","value","recordId","__experimentalGetEntityRecordNoResolver","getRawEntityRecord","record","Object","keys","reduce","accumulator","_key","hasEntityRecords","Array","isArray","getEntityRecords","__experimentalGetDirtyEntityRecords","dirtyRecords","forEach","primaryKeys","edits","primaryKey","hasEditsForEntityRecord","entityConfig","entityRecord","getEditedEntityRecord","push","title","getTitle","__experimentalGetEntitiesBeingSaved","recordsBeingSaved","saving","isSavingEntityRecord","getEntityRecordEdits","getEntityRecordNonTransientEdits","transientEdits","acc","isAutosavingEntityRecord","pending","isAutosave","Boolean","isDeletingEntityRecord","getLastEntitySaveError","getLastEntityDeleteError","getCurrentUndoOffset","undo","offset","getUndoEdit","getRedoEdit","hasUndo","hasRedo","getCurrentTheme","currentTheme","__experimentalGetCurrentGlobalStylesId","currentGlobalStylesId","getThemeSupports","theme_supports","getEmbedPreview","embedPreviews","isPreviewEmbedFallback","preview","oEmbedLinkCheck","html","canUser","action","resource","join","canUserEditEntityRecord","__unstable_rest_base","getAutosaves","postType","postId","autosaves","getAutosave","authorId","author","hasFetchedAutosaves","hasFinishedResolution","getReferenceByDistinctEdits","flattenedUndo","__experimentalGetTemplateForLink","link","template","__experimentalGetCurrentThemeBaseGlobalStyles","themeBaseGlobalStyles","stylesheet","__experimentalGetCurrentThemeGlobalStylesVariations","themeGlobalStyleVariations","getBlockPatterns","blockPatterns","getBlockPatternCategories","blockPatternCategories"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport createSelector from 'rememo';\nimport { set, map, find, get, filter, compact } from 'lodash';\n\n/**\n * WordPress dependencies\n */\nimport { createRegistrySelector } from '@wordpress/data';\nimport { addQueryArgs } from '@wordpress/url';\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Internal dependencies\n */\nimport { STORE_NAME } from './name';\nimport { getQueriedItems } from './queried-data';\nimport { DEFAULT_ENTITY_KEY } from './entities';\nimport { getNormalizedCommaSeparable, isRawAttribute } from './utils';\nimport type { Context, User, Theme, WpTemplate } from './entity-types';\n\n// This is an incomplete, high-level approximation of the State type.\n// It makes the selectors slightly more safe, but is intended to evolve\n// into a more detailed representation over time.\n// See https://github.com/WordPress/gutenberg/pull/40025#discussion_r865410589 for more context.\ninterface State {\n\tautosaves: Record< string | number, Array< unknown > >;\n\tblockPatterns: Array< unknown >;\n\tblockPatternCategories: Array< unknown >;\n\tcurrentGlobalStylesId: string;\n\tcurrentTheme: Theme< 'edit' >;\n\tcurrentUser: User< 'edit' >;\n\tembedPreviews: Record< string, { html: string } >;\n\tentities: EntitiesState;\n\tthemeBaseGlobalStyles: Record< string, Object >;\n\tthemeGlobalStyleVariations: Record< string, string >;\n\tundo: UndoState;\n\tusers: UserState;\n}\n\ninterface EntitiesState {\n\tconfig: EntityConfig[];\n\trecords: Record< string, unknown >;\n}\n\ninterface EntityConfig {\n\tname: string;\n\tkind: string;\n}\n\ninterface UndoState extends Array< Object > {\n\tflattenedUndo: unknown;\n\toffset: number;\n}\n\ninterface UserState {\n\tqueries: Record< string, RecordKey[] >;\n\tbyId: Record< RecordKey, User< 'edit' > >;\n}\n\ntype RecordKey = number | string;\ntype EntityRecord = any;\ntype Optional< T > = T | undefined;\n\n/**\n * HTTP Query parameters sent with the API request to fetch the entity records.\n */\nexport type EntityQuery<\n\tC extends Context,\n\tFields extends string[] | undefined = undefined\n> = Record< string, any > & {\n\tcontext?: C;\n\t/**\n\t * The requested fields. If specified, the REST API will remove from the response\n\t * any fields not on that list.\n\t */\n\t_fields?: Fields;\n};\n\n/**\n * Shared reference to an empty object for cases where it is important to avoid\n * returning a new object reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n */\nconst EMPTY_OBJECT = {};\n\n/**\n * Returns true if a request is in progress for embed preview data, or false\n * otherwise.\n *\n * @param  state Data state.\n * @param  url   URL the preview would be for.\n *\n * @return Whether a request is in progress for an embed preview.\n */\nexport const isRequestingEmbedPreview = createRegistrySelector(\n\t( select ) => ( state: State, url: string ): boolean => {\n\t\treturn select( STORE_NAME ).isResolving( 'getEmbedPreview', [ url ] );\n\t}\n);\n\n/**\n * Returns all available authors.\n *\n * @deprecated since 11.3. Callers should use `select( 'core' ).getUsers({ who: 'authors' })` instead.\n *\n * @param  state Data state.\n * @param  query Optional object of query parameters to\n *               include with request.\n * @return Authors list.\n */\nexport function getAuthors(\n\tstate: State,\n\tquery?: EntityQuery< any >\n): User< 'edit' >[] {\n\tdeprecated( \"select( 'core' ).getAuthors()\", {\n\t\tsince: '5.9',\n\t\talternative: \"select( 'core' ).getUsers({ who: 'authors' })\",\n\t} );\n\n\tconst path = addQueryArgs(\n\t\t'/wp/v2/users/?who=authors&per_page=100',\n\t\tquery\n\t);\n\treturn getUserQueryResults( state, path );\n}\n\n/**\n * Returns the current user.\n *\n * @param  state Data state.\n *\n * @return Current user object.\n */\nexport function getCurrentUser( state: State ): User< 'edit' > {\n\treturn state.currentUser;\n}\n\n/**\n * Returns all the users returned by a query ID.\n *\n * @param  state   Data state.\n * @param  queryID Query ID.\n *\n * @return Users list.\n */\nexport const getUserQueryResults = createSelector(\n\t( state: State, queryID: string ): User< 'edit' >[] => {\n\t\tconst queryResults = state.users.queries[ queryID ];\n\n\t\treturn map( queryResults, ( id ) => state.users.byId[ id ] );\n\t},\n\t( state: State, queryID: string ) => [\n\t\tstate.users.queries[ queryID ],\n\t\tstate.users.byId,\n\t]\n);\n\n/**\n * Returns the loaded entities for the given kind.\n *\n * @deprecated since WordPress 6.0. Use getEntitiesConfig instead\n * @param  state Data state.\n * @param  kind  Entity kind.\n *\n * @return Array of entities with config matching kind.\n */\nexport function getEntitiesByKind( state: State, kind: string ): Array< any > {\n\tdeprecated( \"wp.data.select( 'core' ).getEntitiesByKind()\", {\n\t\tsince: '6.0',\n\t\talternative: \"wp.data.select( 'core' ).getEntitiesConfig()\",\n\t} );\n\treturn getEntitiesConfig( state, kind );\n}\n\n/**\n * Returns the loaded entities for the given kind.\n *\n * @param  state Data state.\n * @param  kind  Entity kind.\n *\n * @return Array of entities with config matching kind.\n */\nexport function getEntitiesConfig( state: State, kind: string ): Array< any > {\n\treturn filter( state.entities.config, { kind } );\n}\n\n/**\n * Returns the entity config given its kind and name.\n *\n * @deprecated since WordPress 6.0. Use getEntityConfig instead\n * @param  state Data state.\n * @param  kind  Entity kind.\n * @param  name  Entity name.\n *\n * @return Entity config\n */\nexport function getEntity( state: State, kind: string, name: string ): any {\n\tdeprecated( \"wp.data.select( 'core' ).getEntity()\", {\n\t\tsince: '6.0',\n\t\talternative: \"wp.data.select( 'core' ).getEntityConfig()\",\n\t} );\n\treturn getEntityConfig( state, kind, name );\n}\n\n/**\n * Returns the entity config given its kind and name.\n *\n * @param  state Data state.\n * @param  kind  Entity kind.\n * @param  name  Entity name.\n *\n * @return Entity config\n */\nexport function getEntityConfig(\n\tstate: State,\n\tkind: string,\n\tname: string\n): any {\n\treturn find( state.entities.config, { kind, name } );\n}\n\n/**\n * Returns the Entity's record object by key. Returns `null` if the value is not\n * yet received, undefined if the value entity is known to not exist, or the\n * entity object if it exists and is received.\n *\n * @param  state State tree\n * @param  kind  Entity kind.\n * @param  name  Entity name.\n * @param  key   Record's key\n * @param  query Optional query.\n *\n * @return Record.\n */\nexport const getEntityRecord = createSelector(\n\t(\n\t\tstate: State,\n\t\tkind: string,\n\t\tname: string,\n\t\tkey: RecordKey,\n\t\tquery?: EntityQuery< any >\n\t): EntityRecord | undefined => {\n\t\tconst queriedState = get( state.entities.records, [\n\t\t\tkind,\n\t\t\tname,\n\t\t\t'queriedData',\n\t\t] );\n\t\tif ( ! queriedState ) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst context = query?.context ?? 'default';\n\n\t\tif ( query === undefined ) {\n\t\t\t// If expecting a complete item, validate that completeness.\n\t\t\tif ( ! queriedState.itemIsComplete[ context ]?.[ key ] ) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\treturn queriedState.items[ context ][ key ];\n\t\t}\n\n\t\tconst item = queriedState.items[ context ]?.[ key ];\n\t\tif ( item && query._fields ) {\n\t\t\tconst filteredItem = {};\n\t\t\tconst fields = getNormalizedCommaSeparable( query._fields ) ?? [];\n\t\t\tfor ( let f = 0; f < fields.length; f++ ) {\n\t\t\t\tconst field = fields[ f ].split( '.' );\n\t\t\t\tconst value = get( item, field );\n\t\t\t\tset( filteredItem, field, value );\n\t\t\t}\n\t\t\treturn filteredItem;\n\t\t}\n\n\t\treturn item;\n\t},\n\t(\n\t\tstate: State,\n\t\tkind: string,\n\t\tname: string,\n\t\trecordId: RecordKey,\n\t\tquery?: EntityQuery< any >\n\t) => {\n\t\tconst context = query?.context ?? 'default';\n\t\treturn [\n\t\t\tget( state.entities.records, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'items',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t\tget( state.entities.records, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'itemIsComplete',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t];\n\t}\n);\n\n/**\n * Returns the Entity's record object by key. Doesn't trigger a resolver nor requests the entity records from the API if the entity record isn't available in the local state.\n *\n * @param  state State tree\n * @param  kind  Entity kind.\n * @param  name  Entity name.\n * @param  key   Record's key\n *\n * @return Record.\n */\nexport function __experimentalGetEntityRecordNoResolver(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\tkey: RecordKey\n): EntityRecord | null {\n\treturn getEntityRecord( state, kind, name, key );\n}\n\n/**\n * Returns the entity's record object by key,\n * with its attributes mapped to their raw values.\n *\n * @param  state State tree.\n * @param  kind  Entity kind.\n * @param  name  Entity name.\n * @param  key   Record's key.\n *\n * @return Object with the entity's raw attributes.\n */\nexport const getRawEntityRecord = createSelector(\n\t(\n\t\tstate: State,\n\t\tkind: string,\n\t\tname: string,\n\t\tkey: RecordKey\n\t): EntityRecord | undefined => {\n\t\tconst record = getEntityRecord( state, kind, name, key );\n\t\treturn (\n\t\t\trecord &&\n\t\t\tObject.keys( record ).reduce( ( accumulator, _key ) => {\n\t\t\t\tif (\n\t\t\t\t\tisRawAttribute( getEntityConfig( state, kind, name ), _key )\n\t\t\t\t) {\n\t\t\t\t\t// Because edits are the \"raw\" attribute values,\n\t\t\t\t\t// we return those from record selectors to make rendering,\n\t\t\t\t\t// comparisons, and joins with edits easier.\n\t\t\t\t\taccumulator[ _key ] = get(\n\t\t\t\t\t\trecord[ _key ],\n\t\t\t\t\t\t'raw',\n\t\t\t\t\t\trecord[ _key ]\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\taccumulator[ _key ] = record[ _key ];\n\t\t\t\t}\n\t\t\t\treturn accumulator;\n\t\t\t}, {} )\n\t\t);\n\t},\n\t(\n\t\tstate: State,\n\t\tkind: string,\n\t\tname: string,\n\t\trecordId: RecordKey,\n\t\tquery?: EntityQuery< any >\n\t) => {\n\t\tconst context = query?.context ?? 'default';\n\t\treturn [\n\t\t\tstate.entities.config,\n\t\t\tget( state.entities.records, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'items',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t\tget( state.entities.records, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'itemIsComplete',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t];\n\t}\n);\n\n/**\n * Returns true if records have been received for the given set of parameters,\n * or false otherwise.\n *\n * @param  state State tree\n * @param  kind  Entity kind.\n * @param  name  Entity name.\n * @param  query Optional terms query.\n *\n * @return  Whether entity records have been received.\n */\nexport function hasEntityRecords(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\tquery?: EntityQuery< any >\n): boolean {\n\treturn Array.isArray( getEntityRecords( state, kind, name, query ) );\n}\n\n/**\n * Returns the Entity's records.\n *\n * @param  state State tree\n * @param  kind  Entity kind.\n * @param  name  Entity name.\n * @param  query Optional terms query.\n *\n * @return Records.\n */\nexport function getEntityRecords(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\tquery?: EntityQuery< any >\n): Array< EntityRecord > | undefined {\n\t// Queried data state is prepopulated for all known entities. If this is not\n\t// assigned for the given parameters, then it is known to not exist.\n\tconst queriedState = get( state.entities.records, [\n\t\tkind,\n\t\tname,\n\t\t'queriedData',\n\t] );\n\tif ( ! queriedState ) {\n\t\treturn null;\n\t}\n\treturn getQueriedItems( queriedState, query );\n}\n\ntype DirtyEntityRecord = {\n\ttitle: string;\n\tkey: RecordKey;\n\tname: string;\n\tkind: string;\n};\n/**\n * Returns the list of dirty entity records.\n *\n * @param  state State tree.\n *\n * @return The list of updated records\n */\nexport const __experimentalGetDirtyEntityRecords = createSelector(\n\t( state: State ): Array< DirtyEntityRecord > => {\n\t\tconst {\n\t\t\tentities: { records },\n\t\t} = state;\n\t\tconst dirtyRecords = [];\n\t\tObject.keys( records ).forEach( ( kind ) => {\n\t\t\tObject.keys( records[ kind ] ).forEach( ( name ) => {\n\t\t\t\tconst primaryKeys = Object.keys(\n\t\t\t\t\trecords[ kind ][ name ].edits\n\t\t\t\t).filter(\n\t\t\t\t\t( primaryKey: RecordKey ) =>\n\t\t\t\t\t\t// The entity record must exist (not be deleted),\n\t\t\t\t\t\t// and it must have edits.\n\t\t\t\t\t\tgetEntityRecord( state, kind, name, primaryKey ) &&\n\t\t\t\t\t\thasEditsForEntityRecord( state, kind, name, primaryKey )\n\t\t\t\t);\n\n\t\t\t\tif ( primaryKeys.length ) {\n\t\t\t\t\tconst entityConfig = getEntityConfig( state, kind, name );\n\t\t\t\t\tprimaryKeys.forEach( ( primaryKey ) => {\n\t\t\t\t\t\tconst entityRecord = getEditedEntityRecord(\n\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tprimaryKey\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdirtyRecords.push( {\n\t\t\t\t\t\t\t// We avoid using primaryKey because it's transformed into a string\n\t\t\t\t\t\t\t// when it's used as an object key.\n\t\t\t\t\t\t\tkey:\n\t\t\t\t\t\t\t\tentityRecord[\n\t\t\t\t\t\t\t\t\tentityConfig.key || DEFAULT_ENTITY_KEY\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\ttitle:\n\t\t\t\t\t\t\t\tentityConfig?.getTitle?.( entityRecord ) || '',\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t} );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\n\t\treturn dirtyRecords;\n\t},\n\t( state ) => [ state.entities.records ]\n);\n\n/**\n * Returns the list of entities currently being saved.\n *\n * @param  state State tree.\n *\n * @return The list of records being saved.\n */\nexport const __experimentalGetEntitiesBeingSaved = createSelector(\n\t( state: State ): Array< DirtyEntityRecord > => {\n\t\tconst {\n\t\t\tentities: { records },\n\t\t} = state;\n\t\tconst recordsBeingSaved = [];\n\t\tObject.keys( records ).forEach( ( kind ) => {\n\t\t\tObject.keys( records[ kind ] ).forEach( ( name ) => {\n\t\t\t\tconst primaryKeys = Object.keys(\n\t\t\t\t\trecords[ kind ][ name ].saving\n\t\t\t\t).filter( ( primaryKey ) =>\n\t\t\t\t\tisSavingEntityRecord( state, kind, name, primaryKey )\n\t\t\t\t);\n\n\t\t\t\tif ( primaryKeys.length ) {\n\t\t\t\t\tconst entityConfig = getEntityConfig( state, kind, name );\n\t\t\t\t\tprimaryKeys.forEach( ( primaryKey ) => {\n\t\t\t\t\t\tconst entityRecord = getEditedEntityRecord(\n\t\t\t\t\t\t\tstate,\n\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tprimaryKey\n\t\t\t\t\t\t);\n\t\t\t\t\t\trecordsBeingSaved.push( {\n\t\t\t\t\t\t\t// We avoid using primaryKey because it's transformed into a string\n\t\t\t\t\t\t\t// when it's used as an object key.\n\t\t\t\t\t\t\tkey:\n\t\t\t\t\t\t\t\tentityRecord[\n\t\t\t\t\t\t\t\t\tentityConfig.key || DEFAULT_ENTITY_KEY\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\ttitle:\n\t\t\t\t\t\t\t\tentityConfig?.getTitle?.( entityRecord ) || '',\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tkind,\n\t\t\t\t\t\t} );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t\treturn recordsBeingSaved;\n\t},\n\t( state ) => [ state.entities.records ]\n);\n\n/**\n * Returns the specified entity record's edits.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return The entity record's edits.\n */\nexport function getEntityRecordEdits(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\trecordId: RecordKey\n): Optional< any > {\n\treturn get( state.entities.records, [ kind, name, 'edits', recordId ] );\n}\n\n/**\n * Returns the specified entity record's non transient edits.\n *\n * Transient edits don't create an undo level, and\n * are not considered for change detection.\n * They are defined in the entity's config.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return The entity record's non transient edits.\n */\nexport const getEntityRecordNonTransientEdits = createSelector(\n\t(\n\t\tstate: State,\n\t\tkind: string,\n\t\tname: string,\n\t\trecordId: RecordKey\n\t): Optional< any > => {\n\t\tconst { transientEdits } = getEntityConfig( state, kind, name ) || {};\n\t\tconst edits = getEntityRecordEdits( state, kind, name, recordId ) || {};\n\t\tif ( ! transientEdits ) {\n\t\t\treturn edits;\n\t\t}\n\t\treturn Object.keys( edits ).reduce( ( acc, key ) => {\n\t\t\tif ( ! transientEdits[ key ] ) {\n\t\t\t\tacc[ key ] = edits[ key ];\n\t\t\t}\n\t\t\treturn acc;\n\t\t}, {} );\n\t},\n\t( state: State, kind: string, name: string, recordId: RecordKey ) => [\n\t\tstate.entities.config,\n\t\tget( state.entities.records, [ kind, name, 'edits', recordId ] ),\n\t]\n);\n\n/**\n * Returns true if the specified entity record has edits,\n * and false otherwise.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return Whether the entity record has edits or not.\n */\nexport function hasEditsForEntityRecord(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\trecordId: RecordKey\n): boolean {\n\treturn (\n\t\tisSavingEntityRecord( state, kind, name, recordId ) ||\n\t\tObject.keys(\n\t\t\tgetEntityRecordNonTransientEdits( state, kind, name, recordId )\n\t\t).length > 0\n\t);\n}\n\n/**\n * Returns the specified entity record, merged with its edits.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return The entity record, merged with its edits.\n */\nexport const getEditedEntityRecord = createSelector(\n\t(\n\t\tstate: State,\n\t\tkind: string,\n\t\tname: string,\n\t\trecordId: RecordKey\n\t): EntityRecord | undefined => ( {\n\t\t...getRawEntityRecord( state, kind, name, recordId ),\n\t\t...getEntityRecordEdits( state, kind, name, recordId ),\n\t} ),\n\t(\n\t\tstate: State,\n\t\tkind: string,\n\t\tname: string,\n\t\trecordId: RecordKey,\n\t\tquery?: EntityQuery< any >\n\t) => {\n\t\tconst context = query?.context ?? 'default';\n\t\treturn [\n\t\t\tstate.entities.config,\n\t\t\tget( state.entities.records, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'items',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t\tget( state.entities.records, [\n\t\t\t\tkind,\n\t\t\t\tname,\n\t\t\t\t'queriedData',\n\t\t\t\t'itemIsComplete',\n\t\t\t\tcontext,\n\t\t\t\trecordId,\n\t\t\t] ),\n\t\t\tget( state.entities.records, [ kind, name, 'edits', recordId ] ),\n\t\t];\n\t}\n);\n\n/**\n * Returns true if the specified entity record is autosaving, and false otherwise.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return Whether the entity record is autosaving or not.\n */\nexport function isAutosavingEntityRecord(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\trecordId: RecordKey\n): boolean {\n\tconst { pending, isAutosave } = get(\n\t\tstate.entities.records,\n\t\t[ kind, name, 'saving', recordId ],\n\t\t{}\n\t);\n\treturn Boolean( pending && isAutosave );\n}\n\n/**\n * Returns true if the specified entity record is saving, and false otherwise.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return Whether the entity record is saving or not.\n */\nexport function isSavingEntityRecord(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\trecordId: RecordKey\n): boolean {\n\treturn get(\n\t\tstate.entities.records,\n\t\t[ kind, name, 'saving', recordId, 'pending' ],\n\t\tfalse\n\t);\n}\n\n/**\n * Returns true if the specified entity record is deleting, and false otherwise.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return Whether the entity record is deleting or not.\n */\nexport function isDeletingEntityRecord(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\trecordId: RecordKey\n): boolean {\n\treturn get(\n\t\tstate.entities.records,\n\t\t[ kind, name, 'deleting', recordId, 'pending' ],\n\t\tfalse\n\t);\n}\n\n/**\n * Returns the specified entity record's last save error.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return The entity record's save error.\n */\nexport function getLastEntitySaveError(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\trecordId: RecordKey\n): any {\n\treturn get( state.entities.records, [\n\t\tkind,\n\t\tname,\n\t\t'saving',\n\t\trecordId,\n\t\t'error',\n\t] );\n}\n\n/**\n * Returns the specified entity record's last delete error.\n *\n * @param  state    State tree.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record ID.\n *\n * @return The entity record's save error.\n */\nexport function getLastEntityDeleteError(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\trecordId: RecordKey\n): any {\n\treturn get( state.entities.records, [\n\t\tkind,\n\t\tname,\n\t\t'deleting',\n\t\trecordId,\n\t\t'error',\n\t] );\n}\n\n/**\n * Returns the current undo offset for the\n * entity records edits history. The offset\n * represents how many items from the end\n * of the history stack we are at. 0 is the\n * last edit, -1 is the second last, and so on.\n *\n * @param  state State tree.\n *\n * @return The current undo offset.\n */\nfunction getCurrentUndoOffset( state: State ): number {\n\treturn state.undo.offset;\n}\n\n/**\n * Returns the previous edit from the current undo offset\n * for the entity records edits history, if any.\n *\n * @param  state State tree.\n *\n * @return The edit.\n */\nexport function getUndoEdit( state: State ): Optional< any > {\n\treturn state.undo[ state.undo.length - 2 + getCurrentUndoOffset( state ) ];\n}\n\n/**\n * Returns the next edit from the current undo offset\n * for the entity records edits history, if any.\n *\n * @param  state State tree.\n *\n * @return The edit.\n */\nexport function getRedoEdit( state: State ): Optional< any > {\n\treturn state.undo[ state.undo.length + getCurrentUndoOffset( state ) ];\n}\n\n/**\n * Returns true if there is a previous edit from the current undo offset\n * for the entity records edits history, and false otherwise.\n *\n * @param  state State tree.\n *\n * @return Whether there is a previous edit or not.\n */\nexport function hasUndo( state: State ): boolean {\n\treturn Boolean( getUndoEdit( state ) );\n}\n\n/**\n * Returns true if there is a next edit from the current undo offset\n * for the entity records edits history, and false otherwise.\n *\n * @param  state State tree.\n *\n * @return Whether there is a next edit or not.\n */\nexport function hasRedo( state: State ): boolean {\n\treturn Boolean( getRedoEdit( state ) );\n}\n\n/**\n * Return the current theme.\n *\n * @param  state Data state.\n *\n * @return The current theme.\n */\nexport function getCurrentTheme( state: State ): any {\n\treturn getEntityRecord( state, 'root', 'theme', state.currentTheme );\n}\n\n/**\n * Return the ID of the current global styles object.\n *\n * @param  state Data state.\n *\n * @return The current global styles ID.\n */\nexport function __experimentalGetCurrentGlobalStylesId( state: State ): string {\n\treturn state.currentGlobalStylesId;\n}\n\n/**\n * Return theme supports data in the index.\n *\n * @param  state Data state.\n *\n * @return Index data.\n */\nexport function getThemeSupports( state: State ): any {\n\treturn getCurrentTheme( state )?.theme_supports ?? EMPTY_OBJECT;\n}\n\n/**\n * Returns the embed preview for the given URL.\n *\n * @param  state Data state.\n * @param  url   Embedded URL.\n *\n * @return Undefined if the preview has not been fetched, otherwise, the preview fetched from the embed preview API.\n */\nexport function getEmbedPreview( state: State, url: string ): any {\n\treturn state.embedPreviews[ url ];\n}\n\n/**\n * Determines if the returned preview is an oEmbed link fallback.\n *\n * WordPress can be configured to return a simple link to a URL if it is not embeddable.\n * We need to be able to determine if a URL is embeddable or not, based on what we\n * get back from the oEmbed preview API.\n *\n * @param  state Data state.\n * @param  url   Embedded URL.\n *\n * @return Is the preview for the URL an oEmbed link fallback.\n */\nexport function isPreviewEmbedFallback( state: State, url: string ): boolean {\n\tconst preview = state.embedPreviews[ url ];\n\tconst oEmbedLinkCheck = '<a href=\"' + url + '\">' + url + '</a>';\n\tif ( ! preview ) {\n\t\treturn false;\n\t}\n\treturn preview.html === oEmbedLinkCheck;\n}\n\n/**\n * Returns whether the current user can perform the given action on the given\n * REST resource.\n *\n * Calling this may trigger an OPTIONS request to the REST API via the\n * `canUser()` resolver.\n *\n * https://developer.wordpress.org/rest-api/reference/\n *\n * @param  state    Data state.\n * @param  action   Action to check. One of: 'create', 'read', 'update', 'delete'.\n * @param  resource REST resource to check, e.g. 'media' or 'posts'.\n * @param  id       Optional ID of the rest resource to check.\n *\n * @return Whether or not the user can perform the action,\n *                             or `undefined` if the OPTIONS request is still being made.\n */\nexport function canUser(\n\tstate: State,\n\taction: string,\n\tresource: string,\n\tid?: RecordKey\n): boolean | undefined {\n\tconst key = compact( [ action, resource, id ] ).join( '/' );\n\treturn get( state, [ 'userPermissions', key ] );\n}\n\n/**\n * Returns whether the current user can edit the given entity.\n *\n * Calling this may trigger an OPTIONS request to the REST API via the\n * `canUser()` resolver.\n *\n * https://developer.wordpress.org/rest-api/reference/\n *\n * @param  state    Data state.\n * @param  kind     Entity kind.\n * @param  name     Entity name.\n * @param  recordId Record's id.\n * @return Whether or not the user can edit,\n * or `undefined` if the OPTIONS request is still being made.\n */\nexport function canUserEditEntityRecord(\n\tstate: State,\n\tkind: string,\n\tname: string,\n\trecordId: RecordKey\n): boolean | undefined {\n\tconst entityConfig = getEntityConfig( state, kind, name );\n\tif ( ! entityConfig ) {\n\t\treturn false;\n\t}\n\tconst resource = entityConfig.__unstable_rest_base;\n\n\treturn canUser( state, 'update', resource, recordId );\n}\n\n/**\n * Returns the latest autosaves for the post.\n *\n * May return multiple autosaves since the backend stores one autosave per\n * author for each post.\n *\n * @param  state    State tree.\n * @param  postType The type of the parent post.\n * @param  postId   The id of the parent post.\n *\n * @return An array of autosaves for the post, or undefined if there is none.\n */\nexport function getAutosaves(\n\tstate: State,\n\tpostType: string,\n\tpostId: RecordKey\n): Array< any > | undefined {\n\treturn state.autosaves[ postId ];\n}\n\n/**\n * Returns the autosave for the post and author.\n *\n * @param  state    State tree.\n * @param  postType The type of the parent post.\n * @param  postId   The id of the parent post.\n * @param  authorId The id of the author.\n *\n * @return The autosave for the post and author.\n */\nexport function getAutosave(\n\tstate: State,\n\tpostType: string,\n\tpostId: RecordKey,\n\tauthorId: RecordKey\n): EntityRecord | undefined {\n\tif ( authorId === undefined ) {\n\t\treturn;\n\t}\n\n\tconst autosaves = state.autosaves[ postId ];\n\treturn find( autosaves, { author: authorId } );\n}\n\n/**\n * Returns true if the REST request for autosaves has completed.\n *\n * @param  state    State tree.\n * @param  postType The type of the parent post.\n * @param  postId   The id of the parent post.\n *\n * @return True if the REST request was completed. False otherwise.\n */\nexport const hasFetchedAutosaves = createRegistrySelector(\n\t( select ) => (\n\t\tstate: State,\n\t\tpostType: string,\n\t\tpostId: RecordKey\n\t): boolean => {\n\t\treturn select( STORE_NAME ).hasFinishedResolution( 'getAutosaves', [\n\t\t\tpostType,\n\t\t\tpostId,\n\t\t] );\n\t}\n);\n\n/**\n * Returns a new reference when edited values have changed. This is useful in\n * inferring where an edit has been made between states by comparison of the\n * return values using strict equality.\n *\n * @example\n *\n * ```\n * const hasEditOccurred = (\n *    getReferenceByDistinctEdits( beforeState ) !==\n *    getReferenceByDistinctEdits( afterState )\n * );\n * ```\n *\n * @param  state Editor state.\n *\n * @return A value whose reference will change only when an edit occurs.\n */\nexport const getReferenceByDistinctEdits = createSelector(\n\t// This unused state argument is listed here for the documentation generating tool (docgen).\n\t( state: State ) => [],\n\t( state: State ) => [\n\t\tstate.undo.length,\n\t\tstate.undo.offset,\n\t\tstate.undo.flattenedUndo,\n\t]\n);\n\n/**\n * Retrieve the frontend template used for a given link.\n *\n * @param  state Editor state.\n * @param  link  Link.\n *\n * @return The template record.\n */\nexport function __experimentalGetTemplateForLink(\n\tstate: State,\n\tlink: string\n): WpTemplate< 'edit' > | null {\n\tconst records = getEntityRecords( state, 'postType', 'wp_template', {\n\t\t'find-template': link,\n\t} );\n\n\tconst template = records?.length ? records[ 0 ] : null;\n\tif ( template ) {\n\t\treturn getEditedEntityRecord(\n\t\t\tstate,\n\t\t\t'postType',\n\t\t\t'wp_template',\n\t\t\ttemplate.id\n\t\t);\n\t}\n\treturn template;\n}\n\n/**\n * Retrieve the current theme's base global styles\n *\n * @param  state Editor state.\n *\n * @return The Global Styles object.\n */\nexport function __experimentalGetCurrentThemeBaseGlobalStyles(\n\tstate: State\n): any {\n\tconst currentTheme = getCurrentTheme( state );\n\tif ( ! currentTheme ) {\n\t\treturn null;\n\t}\n\treturn state.themeBaseGlobalStyles[ currentTheme.stylesheet ];\n}\n\n/**\n * Return the ID of the current global styles object.\n *\n * @param  state Data state.\n *\n * @return The current global styles ID.\n */\nexport function __experimentalGetCurrentThemeGlobalStylesVariations(\n\tstate: State\n): string | null {\n\tconst currentTheme = getCurrentTheme( state );\n\tif ( ! currentTheme ) {\n\t\treturn null;\n\t}\n\treturn state.themeGlobalStyleVariations[ currentTheme.stylesheet ];\n}\n\n/**\n * Retrieve the list of registered block patterns.\n *\n * @param  state Data state.\n *\n * @return Block pattern list.\n */\nexport function getBlockPatterns( state: State ): Array< any > {\n\treturn state.blockPatterns;\n}\n\n/**\n * Retrieve the list of registered block pattern categories.\n *\n * @param  state Data state.\n *\n * @return Block pattern category list.\n */\nexport function getBlockPatternCategories( state: State ): Array< any > {\n\treturn state.blockPatternCategories;\n}\n"]}